<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程鹏 | 个人博客</title>
  
  <subtitle>没有爱因斯坦的智商，学习便没有事半功倍</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-01T07:54:16.441Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka集群搭建</title>
    <link href="http://yoursite.com/2019/06/30/Linux/Kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/06/30/Linux/Kafka集群搭建/</id>
    <published>2019-06-30T03:34:43.892Z</published>
    <updated>2019-07-01T07:54:16.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Kafka是一款分布式消息发布和订阅系统，具有高性能、高吞吐量的特点而被广泛应用与大数据传输场景。它由LinkedIn公司开发，使用Scala语言编写，之后成为Apache基金会的一个顶级项目。<a href="http://kafka.apache.org/" target="_blank" rel="noopener">官方网站</a></p><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><h3 id="下载并解压Kafka包"><a href="#下载并解压Kafka包" class="headerlink" title="下载并解压Kafka包"></a>下载并解压Kafka包</h3><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">官方下载地址</a></p><blockquote><p>注意Kafka所基于的Scala版本</p><ul><li>Binary downloads:<ul><li>Scala 2.11  - <a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.11-1.0.0.tgz" target="_blank" rel="noopener">kafka_2.11-1.0.0.tgz</a> (<a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.11-1.0.0.tgz.asc" target="_blank" rel="noopener">asc</a>, <a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.11-1.0.0.tgz.sha512" target="_blank" rel="noopener">sha512</a>)</li><li>Scala 2.12  - <a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.12-1.0.0.tgz" target="_blank" rel="noopener">kafka_2.12-1.0.0.tgz</a> (<a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.12-1.0.0.tgz.asc" target="_blank" rel="noopener">asc</a>, <a href="https://archive.apache.org/dist/kafka/1.0.0/kafka_2.12-1.0.0.tgz.sha512" target="_blank" rel="noopener">sha512</a>)</li></ul></li></ul></blockquote><p>解压Kafka：<code>tar -zxf kafka_2.11-2.3.0.tgz</code></p><h3 id="配置Zookeeper"><a href="#配置Zookeeper" class="headerlink" title="配置Zookeeper"></a>配置Zookeeper</h3><ol><li><p>下载<code>Zookeeper</code></p></li><li><p>进入<code>Zookeeper</code>安装目录，编辑配置文件<code>vi conf/zoo.cfg</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=192.168.22.200:2888:3888</span><br><span class="line">server.2=192.168.22.201:2888:3888</span><br><span class="line">server.3=192.168.22.202:2888:3888</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>配置<code>zookeeper</code>集群的<code>myid</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 dataDir 文件夹</span></span><br><span class="line">mkdir /var/lib/zookeeper</span><br><span class="line"><span class="comment"># 在ZK集群机器分别设置对应的myid,如在 192.168.22.200 节点设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li><p>启动<code>zookeeper</code>集群</p><p>分别在集群中的机器中Kafka安装目录中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh start</span><br></pre></td></tr></table></figure></li><li><p>验证启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以观察到如下内容</span></span><br><span class="line"><span class="comment"># 从节点</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/kafka/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... already running as process 9408.</span><br><span class="line">[root@root bin]<span class="comment"># ./zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/kafka/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line"><span class="comment"># 主节点</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/kafka/apache-zookeeper-3.5.5/bin/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Error contacting service. It is probably not running.</span><br><span class="line">[root@root bin]<span class="comment"># ./zookeeper-3.4.10/bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/kafka/apache-zookeeper-3.5.5/bin/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置Kafka"><a href="#配置Kafka" class="headerlink" title="配置Kafka"></a>配置Kafka</h2><ol><li><p>修改Kafka服务器配置文件</p><p>进入Kafka安装目录，编辑配置文件<code>vi config/service.properties</code>，修改以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改broker.id，每台服务器的broker.id为唯一的integer类型数字</span></span><br><span class="line">broker.id=0</span><br><span class="line"><span class="comment"># 添加主节点监听端口，IP为本机IP地址</span></span><br><span class="line">listeners=PLAINTEXT://192.168.22.200:9092</span><br><span class="line"><span class="comment"># 设置Zookeeper集群连接</span></span><br><span class="line">zookeeper.connect=192.168.22.200:2181,192.168.22.201:2181,192.168.22.202:2181</span><br></pre></td></tr></table></figure></li><li><p>启动Kafka集群</p><p>在每台服务器的Kafka安装目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure></li><li><p>验证</p><p>使用zkCli进入Zookeeper，在Zookeeper安装目录执行<code>./bin/zkCli.sh -server 192.168.22.200:2181</code>(Zookeeper集群任意一台均可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到多出来许多节点，这些都是Kafka在ZK上注册的节点</span></span><br><span class="line">[cluster, controller_epoch, controller, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config]</span><br></pre></td></tr></table></figure><blockquote><p>controller：控制节点</p><p>brokers：Kafka集群的broker信息，以及topic信息</p><p>consumers：ids/owners/offsets</p></blockquote></li><li><p>停止Kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>Kafka使用文档：<a href="https://kafka.apache.org/10/documentation.html#quickstart" target="_blank" rel="noopener">https://kafka.apache.org/10/documentation.html#quickstart</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Apache Kafka是一款分布式消息发布和订阅系统，具有高性能、高吞吐量的特点而被广泛应用与大数据传输场景。它由LinkedIn公司开发
      
    
    </summary>
    
      <category term="Kafka" scheme="http://yoursite.com/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat外网远程Debug</title>
    <link href="http://yoursite.com/2019/06/30/devNote/Tomcat%E5%A4%96%E7%BD%91%E8%BF%9C%E7%A8%8BDebug/"/>
    <id>http://yoursite.com/2019/06/30/devNote/Tomcat外网远程Debug/</id>
    <published>2019-06-30T03:07:22.372Z</published>
    <updated>2019-06-30T03:08:14.457Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>保持远端代码版本本地代码版本一致</p></li><li><p>执行<code>sudo vim ${tomcat}/bin/catalina.sh</code>进行编辑，其中<code>${tomcat}</code>为tomcat的安装目录</p></li><li><p>添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS=&quot;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005&quot;</span><br></pre></td></tr></table></figure><p>其中address为开发的远程debug的端口号</p></li><li><p>把开放远程debug的端口加到防火墙配置中</p></li><li><p>及时关闭开发的debug端口</p></li><li><p>编辑<code>sudo vim /etc/sysconfig/iptables</code></p></li><li><p>添加如下配置<code>-A INPUT -p tcp -m tcp --dport 5000 -j ACCEPT</code></p></li><li><p><code>:wq</code>保存退出</p></li><li><p>重启防火墙<code>sudo service iptables restart</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;保持远端代码版本本地代码版本一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;sudo vim ${tomcat}/bin/catalina.sh&lt;/code&gt;进行编辑，其中&lt;code&gt;${tomcat}&lt;/code&gt;为tomcat的安装目录&lt;/p&gt;
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://yoursite.com/categories/Tomcat/"/>
    
    
      <category term="Tomcat Debug" scheme="http://yoursite.com/tags/Tomcat-Debug/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.2安装htop</title>
    <link href="http://yoursite.com/2019/06/30/Linux/CentOS7.2%E5%AE%89%E8%A3%85htop/"/>
    <id>http://yoursite.com/2019/06/30/Linux/CentOS7.2安装htop/</id>
    <published>2019-06-30T03:05:02.682Z</published>
    <updated>2019-06-30T03:06:00.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在CentOS7-2中安装htop"><a href="#在CentOS7-2中安装htop" class="headerlink" title="在CentOS7.2中安装htop"></a>在CentOS7.2中安装htop</h2><h3 id="安装gcc及其编译的库"><a href="#安装gcc及其编译的库" class="headerlink" title="安装gcc及其编译的库"></a>安装<code>gcc</code>及其编译的库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果没有安装gcc，按如下来安装</span><br><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line">安装后，编译htop需要安装一个编译Linux内核的库</span><br><span class="line">yum install -y ncurses-devel</span><br></pre></td></tr></table></figure><h3 id="htop下载，编译和安装"><a href="#htop下载，编译和安装" class="headerlink" title="htop下载，编译和安装"></a><code>htop</code>下载，编译和安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">htop下载</span><br><span class="line">wget http://sourceforge.net/projects/htop/files/latest/download</span><br><span class="line"></span><br><span class="line">解压</span><br><span class="line">tar -zxf download</span><br><span class="line"><span class="built_in">cd</span> htop-1.0.2</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">htop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在CentOS7-2中安装htop&quot;&gt;&lt;a href=&quot;#在CentOS7-2中安装htop&quot; class=&quot;headerlink&quot; title=&quot;在CentOS7.2中安装htop&quot;&gt;&lt;/a&gt;在CentOS7.2中安装htop&lt;/h2&gt;&lt;h3 id=&quot;安装gcc
      
    
    </summary>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="htop" scheme="http://yoursite.com/tags/htop/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04配置静态IP地址</title>
    <link href="http://yoursite.com/2019/06/30/Linux/Ubuntu%2018.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2019/06/30/Linux/Ubuntu 18.04配置静态IP地址/</id>
    <published>2019-06-30T03:01:09.673Z</published>
    <updated>2019-06-30T03:04:19.234Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>编辑网络配置文件</p><blockquote><p><code>vi /etc/netplan/50-cloud-init.yaml</code></p></blockquote></li><li><p>将原文件修改为如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># This file is generated from information provided by</span><br><span class="line"># the datasource.  Changes to it will not persist across an instance.</span><br><span class="line"># To disable cloud-init&apos;s network configuration capabilities, write a file</span><br><span class="line"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class="line"># network: &#123;config: disabled&#125;</span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">        dhcp4: no</span><br><span class="line">        dhcp6: no </span><br><span class="line">        addresses: [192.168.22.100/24]</span><br><span class="line">        optional: true</span><br><span class="line">        gateway4: 192.168.22.2</span><br><span class="line">        nameservers:</span><br><span class="line">                addresses: [8.8.8.8,202.96.209.133]</span><br><span class="line">version: 2</span><br></pre></td></tr></table></figure></li><li><p>启用配置<code>netplan apply</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;编辑网络配置文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vi /etc/netplan/50-cloud-init.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将原文件修改为如下内容&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 vi编辑器原格式粘贴</title>
    <link href="http://yoursite.com/2019/06/30/Linux/Ubuntu%2018.04%20vi%E7%BC%96%E8%BE%91%E5%99%A8%E5%8E%9F%E6%A0%BC%E5%BC%8F%E7%B2%98%E8%B4%B4/"/>
    <id>http://yoursite.com/2019/06/30/Linux/Ubuntu 18.04 vi编辑器原格式粘贴/</id>
    <published>2019-06-30T03:00:20.296Z</published>
    <updated>2019-06-30T03:04:02.010Z</updated>
    
    <content type="html"><![CDATA[<ol><li>使用vi编辑器打开文件</li><li>使用命令编辑模式(即刚使用vi编辑器打开文件状态)</li><li>输入<code>:set paste</code>，回车后，按<code>i</code>进入编辑模式，即可使用原样粘贴</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;使用vi编辑器打开文件&lt;/li&gt;
&lt;li&gt;使用命令编辑模式(即刚使用vi编辑器打开文件状态)&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;:set paste&lt;/code&gt;，回车后，按&lt;code&gt;i&lt;/code&gt;进入编辑模式，即可使用原样粘贴&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置固定IP</title>
    <link href="http://yoursite.com/2019/06/30/Linux/CentOS7%E5%9B%BA%E5%AE%9AIP/"/>
    <id>http://yoursite.com/2019/06/30/Linux/CentOS7固定IP/</id>
    <published>2019-06-30T02:39:21.645Z</published>
    <updated>2019-06-30T06:02:42.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看当前启用的网卡"><a href="#查看当前启用的网卡" class="headerlink" title="查看当前启用的网卡"></a>查看当前启用的网卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@root ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:9c:f1:80 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.22.128/24 brd 192.168.22.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1453sec preferred_lft 1453sec</span><br><span class="line">    inet6 fe80::d5c8:a782:53b7:4e5b/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@root ~]<span class="comment"># cd /etc/sysconfig/network-scripts</span></span><br><span class="line">[root@root network-scripts]<span class="comment"># ls -ltr ifcfg-*</span></span><br><span class="line">-rw-r--r--. 1 root root 254 1月   3 2018 ifcfg-lo</span><br><span class="line">-rw-r--r--. 1 root root 310 6月  24 16:27 ifcfg-ens33</span><br></pre></td></tr></table></figure><blockquote><p>如上所示，修改<code>ifcfg-ens33</code>设置为静态IP</p></blockquote><a id="more"></a><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为如下内容</span></span><br><span class="line">TYPE=<span class="string">"Ethernet"</span></span><br><span class="line">PROXY_METHOD=<span class="string">"none"</span></span><br><span class="line">BROWSER_ONLY=<span class="string">"no"</span></span><br><span class="line">BOOTPROTO=<span class="string">"static"</span></span><br><span class="line">DEFROUTE=<span class="string">"yes"</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">"no"</span></span><br><span class="line">IPV6INIT=<span class="string">"yes"</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">"yes"</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">"yes"</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">"no"</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">"stable-privacy"</span></span><br><span class="line">NAME=<span class="string">"ens33"</span></span><br><span class="line">UUID=<span class="string">"213b156a-84f4-413f-9e3d-87216e967165"</span></span><br><span class="line">DEVICE=<span class="string">"ens33"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">IPADDR=192.168.22.200</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.22.2</span><br><span class="line">DNS1=114.114.114.114 //DNS</span><br><span class="line">NM_CONTROLLED=no //是否由networkmanager控制，no否</span><br></pre></td></tr></table></figure><h2 id="保存-重启网络"><a href="#保存-重启网络" class="headerlink" title="保存 重启网络"></a>保存 重启网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看当前启用的网卡&quot;&gt;&lt;a href=&quot;#查看当前启用的网卡&quot; class=&quot;headerlink&quot; title=&quot;查看当前启用的网卡&quot;&gt;&lt;/a&gt;查看当前启用的网卡&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@root ~]&lt;span class=&quot;comment&quot;&gt;# ip addr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 127.0.0.1/8 scope host lo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet6 ::1/128 scope host &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link/ether 00:0c:29:9c:f1:80 brd ff:ff:ff:ff:ff:ff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 192.168.22.128/24 brd 192.168.22.255 scope global noprefixroute dynamic ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft 1453sec preferred_lft 1453sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet6 fe80::d5c8:a782:53b7:4e5b/64 scope link noprefixroute &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@root ~]&lt;span class=&quot;comment&quot;&gt;# cd /etc/sysconfig/network-scripts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@root network-scripts]&lt;span class=&quot;comment&quot;&gt;# ls -ltr ifcfg-*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--. 1 root root 254 1月   3 2018 ifcfg-lo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--. 1 root root 310 6月  24 16:27 ifcfg-ens33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如上所示，修改&lt;code&gt;ifcfg-ens33&lt;/code&gt;设置为静态IP&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="FTP" scheme="http://yoursite.com/categories/FTP/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/FTP/CentOS/"/>
    
    
      <category term="FTP" scheme="http://yoursite.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Kubectl 常用命令</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Kubectl%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Kubectl 常用命令/</id>
    <published>2019-06-28T08:41:46.056Z</published>
    <updated>2019-06-28T08:44:12.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>小提示：</strong> 所有命令前都可以加上 <code>watch</code> 命令来观察状态的实时变化，如：<code>watch kubectl get pods --all-namespaces</code></p><h2 id="查看组件状态"><a href="#查看组件状态" class="headerlink" title="查看组件状态"></a>查看组件状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get cs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="查看环境信息"><a href="#查看环境信息" class="headerlink" title="查看环境信息"></a>查看环境信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="查看-Node"><a href="#查看-Node" class="headerlink" title="查看 Node"></a>查看 Node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h2 id="查看集群配置"><a href="#查看集群配置" class="headerlink" title="查看集群配置"></a>查看集群配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get cm kubeadm-config -oyaml</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx --replicas=2 --port=80</span><br></pre></td></tr></table></figure><h2 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=LoadBalancer</span><br></pre></td></tr></table></figure><h2 id="查看命名空间"><a href="#查看命名空间" class="headerlink" title="查看命名空间"></a>查看命名空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespace</span><br></pre></td></tr></table></figure><h2 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">development</span></span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get deployment -o wide</span><br></pre></td></tr></table></figure><h2 id="看服务"><a href="#看服务" class="headerlink" title="看服务"></a>看服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service -o wide</span><br></pre></td></tr></table></figure><h2 id="查看详情"><a href="#查看详情" class="headerlink" title="查看详情"></a>查看详情</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod &lt;Pod Name&gt;</span><br><span class="line">kubectl describe deployment &lt;Deployment Name&gt;</span><br><span class="line">kubectl describe service &lt;Service Name&gt;</span><br></pre></td></tr></table></figure><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f &lt;Pod Name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除容器和服务"><a href="#删除容器和服务" class="headerlink" title="删除容器和服务"></a>删除容器和服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment &lt;Deployment Name&gt;</span><br><span class="line">kubectl delete service &lt;Service Name&gt;</span><br></pre></td></tr></table></figure><h2 id="配置方式运行"><a href="#配置方式运行" class="headerlink" title="配置方式运行"></a>配置方式运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f &lt;YAML&gt;</span><br></pre></td></tr></table></figure><h2 id="配置方式删除"><a href="#配置方式删除" class="headerlink" title="配置方式删除"></a>配置方式删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f &lt;YAML&gt;</span><br></pre></td></tr></table></figure><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config view</span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure><h2 id="查看-Ingress"><a href="#查看-Ingress" class="headerlink" title="查看 Ingress"></a>查看 Ingress</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure><h2 id="查看持久卷"><a href="#查看持久卷" class="headerlink" title="查看持久卷"></a>查看持久卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pv</span><br></pre></td></tr></table></figure><h2 id="查看持久卷消费者"><a href="#查看持久卷消费者" class="headerlink" title="查看持久卷消费者"></a>查看持久卷消费者</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure><h2 id="查看-ConfigMap"><a href="#查看-ConfigMap" class="headerlink" title="查看 ConfigMap"></a>查看 ConfigMap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cm &lt;ConfigMap Name&gt;</span><br></pre></td></tr></table></figure><h2 id="修改-ConfigMap"><a href="#修改-ConfigMap" class="headerlink" title="修改 ConfigMap"></a>修改 ConfigMap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit cm &lt;ConfigMap Name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;小提示：&lt;/strong&gt; 所有命令前都可以加上 &lt;code&gt;watch&lt;/code&gt; 命令来观察状态的实时变化，如：&lt;code&gt;watch kubectl get pods --all-namespaces&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;查看组件状态&quot;&gt;&lt;a href=&quot;#查看组件状态&quot; class=&quot;headerlink&quot; title=&quot;查看组件状态&quot;&gt;&lt;/a&gt;查看组件状态&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; kubectl get cs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查看环境信息&quot;&gt;&lt;a href=&quot;#查看环境信息&quot; class=&quot;headerlink&quot; title=&quot;查看环境信息&quot;&gt;&lt;/a&gt;查看环境信息&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl cluster-info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubectl 与 Docker 命令</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Kubectl%20%E4%B8%8E%20Docker%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Kubectl 与 Docker 命令/</id>
    <published>2019-06-28T08:40:09.272Z</published>
    <updated>2019-06-28T08:41:39.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Docker 命令和 Kubectl 命令有很多相似的地方，Docker 操作容器，Kubectl 操作 Pod（容器的集合）等</p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><ul><li>docker：<code>docker run -d --restart=always -e DOMAIN=cluster --name nginx-app -p 80:80 nginx</code></li><li>kubectl：<ul><li><code>kubectl run --image=nginx nginx-app --port=80 --env=&quot;DOMAIN=cluster&quot;</code></li><li><code>kubectl expose deployment nginx-app --port=80 --name=nginx-http</code></li></ul></li></ul><blockquote><p><strong>注意：</strong> <code>kubectl run</code> 会创建一个 <strong>Deployment</strong> 并且默认会在后台运行，以上面的代码为例它的名称为 <strong>nginx-app</strong>。默认情况 Deployment 并不会将端口暴露出去，所以我们还需要使用 <code>kubectl expose</code> 暴露端口以供访问，此时还会创建一个同名的 <strong>Service</strong></p></blockquote><a id="more"></a><h2 id="查看已运行的容器"><a href="#查看已运行的容器" class="headerlink" title="查看已运行的容器"></a>查看已运行的容器</h2><ul><li>docker：<code>docker ps</code></li><li>kubectl：<ul><li><code>kubectl get pods</code></li><li><code>kubectl get deployment</code></li><li><code>kubectl get service</code></li></ul></li></ul><h2 id="交互式进入容器"><a href="#交互式进入容器" class="headerlink" title="交互式进入容器"></a>交互式进入容器</h2><ul><li>docker：<code>docker exec -it &lt;容器 ID/NAME&gt; /bin/bash</code></li><li>kubectl：<code>kubectl exec -it &lt;容器名&gt; -- /bin/bash</code></li></ul><h2 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h2><ul><li>docker：<code>docker logs -f &lt;容器 ID/NAME&gt;</code></li><li>kubectl：<code>kubectl logs -f &lt;容器名&gt;</code></li></ul><h2 id="停止和删除容器"><a href="#停止和删除容器" class="headerlink" title="停止和删除容器"></a>停止和删除容器</h2><ul><li>docker：<ul><li><code>docker stop &lt;容器 ID/NAME&gt;</code></li><li><code>docker rm &lt;容器 ID/NAME&gt;</code></li></ul></li><li>kubectl：<ul><li><code>kubectl delete deployment &lt;Deployment 名称&gt;</code></li><li><code>kubectl delete service &lt;Service 名称&gt;</code></li></ul></li></ul><blockquote><p><strong>注意：</strong> 不要直接删除 Pod，使用 kubectl 请删除拥有该 Pod 的 Deployment。如果直接删除 Pod，则 Deployment 将会重新创建该 Pod</p></blockquote><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><ul><li>docker：<code>docker version</code></li><li>kubectl：<code>kubectl version</code></li></ul><h2 id="查看环境信息"><a href="#查看环境信息" class="headerlink" title="查看环境信息"></a>查看环境信息</h2><ul><li>docker：<code>docker info</code></li><li>kubectl：<code>kubectl cluster-info</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Docker 命令和 Kubectl 命令有很多相似的地方，Docker 操作容器，Kubectl 操作 Pod（容器的集合）等&lt;/p&gt;
&lt;h2 id=&quot;运行容器&quot;&gt;&lt;a href=&quot;#运行容器&quot; class=&quot;headerlink&quot; title=&quot;运行容器&quot;&gt;&lt;/a&gt;运行容器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;docker：&lt;code&gt;docker run -d --restart=always -e DOMAIN=cluster --name nginx-app -p 80:80 nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;kubectl：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl run --image=nginx nginx-app --port=80 --env=&amp;quot;DOMAIN=cluster&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl expose deployment nginx-app --port=80 --name=nginx-http&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;kubectl run&lt;/code&gt; 会创建一个 &lt;strong&gt;Deployment&lt;/strong&gt; 并且默认会在后台运行，以上面的代码为例它的名称为 &lt;strong&gt;nginx-app&lt;/strong&gt;。默认情况 Deployment 并不会将端口暴露出去，所以我们还需要使用 &lt;code&gt;kubectl expose&lt;/code&gt; 暴露端口以供访问，此时还会创建一个同名的 &lt;strong&gt;Service&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Dashboard</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Kubernetes%20Dashboard/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Kubernetes Dashboard/</id>
    <published>2019-06-28T08:36:26.256Z</published>
    <updated>2019-06-28T08:39:44.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Kubernetes Dashboard 是 Kubernetes 集群的 Web UI，用于管理集群。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>GitHub 地址：<a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">Kubernetes Dashboard</a></p><p>下载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 省略部分代码...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------- Dashboard Deployment ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">        <span class="comment"># 修改镜像地址为阿里云</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="bullet">--auto-generate-certificates</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/certs</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/tmp</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">tmp-volume</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTPS</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">        secret:</span></span><br><span class="line"><span class="attr">          secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">tmp-volume</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 修改类型为 NodePort 访问</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="comment"># 设置端口号为 30001</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30001</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>部署到集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl -n kube-system get pods</span><br><span class="line">kubectl -n kube-system get service kubernetes-dashboard</span><br><span class="line">kubectl -n kube-system describe service kubernetes-dashboard</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>需要使用 NodeIP:30001 访问 Dashboard，因为证书原因除火狐浏览器外其它浏览器无法直接打开页面</p><p>Chrome 浏览器显示如下</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gyk6a6c0j30sd0hf0t7.jpg" alt=""></p><p>点击 <strong>接受风险并继续</strong> 即可显示欢迎界面</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gykk4c1bj30uq0gtaan.jpg" alt="">登录</p><p>我们采用 Token 方式登录</p><ul><li>创建登录账号，创建一个名为 <code>dashboard-adminuser.yaml</code> 的配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f dashboard-adminuser.yaml</span><br></pre></td></tr></table></figure><ul><li>打印 Token 信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Name:         admin-user-token-86cz9</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 3902d3d4-8b13-11e9-8089-000c29d49c77</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTg2Y3o5Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzOTAyZDNkNC04YjEzLTExZTktODA4OS0wMDBjMjlkNDljNzciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.pA44wyarsahOwqH7X7RVlcdB1k3_j-L3gwOYlTQ4_Lu5ZmfXDFlhqN-Q1tdryJes_V1Nj_utocnXBAxsGzOGaVR4Te4oli3htSepI9MrggQAyeC3C0_QANXGCE6V5L6B5tGZ6tDsY92VDnlvz2N6OrHaH2IJJd2DlxzYvAPvfAFuPeHWuPeVxUisMfXeW42S7US6skZwbZ06JrPYAFxHjqv3zoxRxI8-bmekltvOamsrL0pAXvIUzaowgbjiQb2NgeLAw9O6qfYcz5DAi2C-7G_yAcve6pgnWcIGhVpKoim9DfJUhe1SVx4H4X5Na6GVaaD6FdUIb7UOgsO1FVpTPw</span><br></pre></td></tr></table></figure><p>将 Token 输入浏览器，成功登陆后效果如下</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gyl78n8pj31gi0mm0uk.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Kubernetes Dashboard 是 Kubernetes 集群的 Web UI，用于管理集群。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;GitHub 地址：&lt;a href=&quot;https://github.com/kubernetes/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kubernetes Dashboard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes ConfigMap</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Kubernetes%20ConfigMap/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Kubernetes ConfigMap/</id>
    <published>2019-06-28T08:35:04.590Z</published>
    <updated>2019-06-28T08:36:54.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ConfigMap 是用来存储配置文件的 Kubernetes 资源对象，所有的配置内容都存储在 etcd 中。它可以被用来保存单个属性，也可以用来保存整个配置文件或者 JSON 二进制对象。ConfigMap API 资源提供了将配置数据注入容器的方式，同时保证该机制对容器来说是透明的。配置应该从 Image 内容中解耦，以此来保持容器化应用程序的可移植性。</p><h2 id="使用-ConfigMap-配置-MySQL"><a href="#使用-ConfigMap-配置-MySQL" class="headerlink" title="使用 ConfigMap 配置 MySQL"></a>使用 ConfigMap 配置 MySQL</h2><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-test-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 这里是键值对数据</span></span><br><span class="line">  <span class="string">mysqld.cnf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    [client]</span></span><br><span class="line"><span class="string">    port=3306</span></span><br><span class="line"><span class="string">    [mysql]</span></span><br><span class="line"><span class="string">    no-auto-rehash</span></span><br><span class="line"><span class="string">    [mysqld]</span></span><br><span class="line"><span class="string">    skip-host-cache</span></span><br><span class="line"><span class="string">    skip-name-resolve</span></span><br><span class="line"><span class="string">    default-authentication-plugin=mysql_native_password</span></span><br><span class="line"><span class="string">    character-set-server=utf8mb4</span></span><br><span class="line"><span class="string">    collation-server=utf8mb4_general_ci</span></span><br><span class="line"><span class="string">    explicit_defaults_for_timestamp=true</span></span><br><span class="line"><span class="string">    lower_case_table_names=1</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">"123456"</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line">            <span class="comment"># 以数据卷的形式挂载 MySQL 配置文件目录</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">cm-vol-test</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">nfs-vol-test</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line">        <span class="comment"># 将 ConfigMap 中的内容以文件形式挂载进数据卷</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cm-vol-test</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">mysql-test-config</span></span><br><span class="line"><span class="attr">            items:</span></span><br><span class="line">                <span class="comment"># ConfigMap 中的 Key</span></span><br><span class="line"><span class="attr">              - key:</span> <span class="string">mysqld.cnf</span></span><br><span class="line">                <span class="comment"># ConfigMap Key 匹配的 Value 写入名为 mysqld.cnf 的文件中</span></span><br><span class="line"><span class="attr">                path:</span> <span class="string">mysqld.cnf</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nfs-vol-test</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">nfs-pvc-mysql-test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">32036</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mysql-test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 ConfigMap</span></span><br><span class="line">kubectl get cm</span><br><span class="line">kubectl describe cm &lt;ConfigMap Name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;ConfigMap 是用来存储配置文件的 Kubernetes 资源对象，所有的配置内容都存储在 etcd 中。它可以被用来保存单个属性，也可以用来保存整个配置文件或者 JSON 二进制对象。ConfigMap API 资源提供了将配置数据注入容器的方式，同时保证该机制对容器来说是透明的。配置应该从 Image 内容中解耦，以此来保持容器化应用程序的可移植性。&lt;/p&gt;
&lt;h2 id=&quot;使用-ConfigMap-配置-MySQL&quot;&gt;&lt;a href=&quot;#使用-ConfigMap-配置-MySQL&quot; class=&quot;headerlink&quot; title=&quot;使用 ConfigMap 配置 MySQL&quot;&gt;&lt;/a&gt;使用 ConfigMap 配置 MySQL&lt;/h2&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>K8s数据持久化</title>
    <link href="http://yoursite.com/2019/06/28/k8s/K8s%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2019/06/28/k8s/K8s数据持久化/</id>
    <published>2019-06-28T08:27:23.852Z</published>
    <updated>2019-07-02T04:18:31.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 Docker 中就有数据卷的概念，当容器删除时，数据也一起会被删除，想要持久化使用数据，需要把主机上的目录挂载到 Docker 中去，在 K8S 中，数据卷是通过 Pod 实现持久化的，如果 Pod 删除，数据卷也会一起删除，k8s 的数据卷是 docker 数据卷的扩展，K8S 适配各种存储系统，包括本地存储 EmptyDir，HostPath， 网络存储（NFS，GlusterFS，PV/PVC）等。</p><p>我们以部署 MySQL8 为例，采用 <strong>NFS + PV/PVC</strong> 网络存储方案实现我们的 Kubernetes 数据持久化。</p><a id="more"></a><p>存储管理与计算管理是两个不同的问题。Persistent Volume 子系统，对存储的供应和使用做了抽象，以 API 形式提供给管理员和用户使用。要完成这一任务，我们引入了两个新的 API 资源：<strong>Persistent Volume（持久卷）</strong> 和 <strong>Persistent Volume Claim（持久卷消费者）</strong>。</p><p>Persistent Volume（PV）是集群之中的一块网络存储。跟 Node 一样，也是集群的资源。PV 跟 Volume (卷) 类似，不过会有独立于 Pod 的生命周期。这一 API 对象包含了存储的实现细节，例如 NFS、iSCSI 或者其他的云提供商的存储系统。Persistent Volume Claim (PVC) 是用户的一个请求。跟 Pod 类似，Pod 消费 Node 的资源，PVC 消费 PV 的资源。Pod 能够申请特定的资源（CPU 和内存）；Claim 能够请求特定的尺寸和访问模式（例如可以加载一个读写，以及多个只读实例）</p><h2 id="什么是-NFS"><a href="#什么是-NFS" class="headerlink" title="什么是 NFS"></a>什么是 NFS</h2><p>NFS 是 Network File System 的简写，即网络文件系统，NFS 是 FreeBSD 支持的文件系统中的一种。NFS 基于 RPC (Remote Procedure Call) 远程过程调用实现，其允许一个系统在网络上与它人共享目录和文件。通过使用 NFS，用户和程序就可以像访问本地文件一样访问远端系统上的文件。NFS 是一个非常稳定的，可移植的网络文件系统。具备可扩展和高性能等特性，达到了企业级应用质量标准。由于网络速度的增加和延迟的降低，NFS 系统一直是通过网络提供文件系统服务的有竞争力的选择 。</p><h3 id="NFS-原理"><a href="#NFS-原理" class="headerlink" title="NFS 原理"></a>NFS 原理</h3><p>NFS 使用 RPC (Remote Procedure Call) 的机制进行实现，RPC 使得客户端可以调用服务端的函数。同时，由于有 VFS 的存在，客户端可以像使用其它普通文件系统一样使用 NFS 文件系统。经由操作系统的内核，将 NFS 文件系统的调用请求通过 TCP/IP 发送至服务端的 NFS 服务。NFS 服务器执行相关的操作，并将操作结果返回给客户端。</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gy9og21vj30jg0asmxv.jpg" alt=""></p><h3 id="NFS-服务主要进程"><a href="#NFS-服务主要进程" class="headerlink" title="NFS 服务主要进程"></a>NFS 服务主要进程</h3><ul><li>rpc.nfsd：最主要的 NFS 进程，管理客户端是否可登录</li><li>rpc.mountd：挂载和卸载 NFS 文件系统，包括权限管理</li><li>rpc.lockd：非必要，管理文件锁，避免同时写出错</li><li>rpc.statd：非必要，检查文件一致性，可修复文件</li></ul><h3 id="NFS-的关键工具"><a href="#NFS-的关键工具" class="headerlink" title="NFS 的关键工具"></a>NFS 的关键工具</h3><ul><li>主要配置文件：<code>/etc/exports</code></li><li>NFS 文件系统维护命令：<code>/usr/bin/exportfs</code></li><li>共享资源的日志文件：<code>/var/lib/nfs/*tab</code></li><li>客户端查询共享资源命令：<code>/usr/sbin/showmount</code></li><li>端口配置：<code>/etc/sysconfig/nfs</code></li></ul><h3 id="NFS-服务端配置"><a href="#NFS-服务端配置" class="headerlink" title="NFS 服务端配置"></a>NFS 服务端配置</h3><p>在 NFS 服务器端的主要配置文件为 <code>/etc/exports</code> 时，通过此配置文件可以设置共享文件目录。每条配置记录由 NFS 共享目录、NFS 客户端地址和参数这 3 部分组成，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NFS 共享目录] [NFS 客户端地址 1 (参数 1, 参数 2, 参数 3……)] [客户端地址 2 (参数 1, 参数 2, 参数 3……)]</span><br></pre></td></tr></table></figure><ul><li>NFS 共享目录：服务器上共享出去的文件目录</li><li>NFS 客户端地址：允许其访问的 NFS 服务器的客户端地址，可以是客户端 IP 地址，也可以是一个网段 (192.168.141.0/24)</li><li>访问参数：括号中逗号分隔项，主要是一些权限选项</li></ul><h4 id="访问权限参数"><a href="#访问权限参数" class="headerlink" title="访问权限参数"></a>访问权限参数</h4><table><thead><tr><th>序号</th><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ro</td><td>客户端对于共享文件目录为只读权限。默认</td></tr><tr><td>2</td><td>rw</td><td>客户端对于共享文件目录具有读写权限</td></tr></tbody></table><h4 id="用户映射参数"><a href="#用户映射参数" class="headerlink" title="用户映射参数"></a>用户映射参数</h4><table><thead><tr><th>序号</th><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>root_squash</td><td>使客户端使用 root 账户访冋时，服务器映射为服务器本地的匿名账号</td></tr><tr><td>2</td><td>no_root_squash</td><td>客户端连接服务端时如果使用的是 root，那么也拥有对服务端分享的目录的 root 权限</td></tr><tr><td>3</td><td>all_squash</td><td>将所有客户端用户请求映射到匿名用户或用户组（nfsnobody)</td></tr><tr><td>4</td><td>no_all_squash</td><td>与上相反。默认</td></tr><tr><td>5</td><td>anonuid=xxx</td><td>将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户(UID=xxx)</td></tr><tr><td>6</td><td>anongid=xxx</td><td>将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户(GUI=xxx)</td></tr></tbody></table><h4 id="其它配置参数"><a href="#其它配置参数" class="headerlink" title="其它配置参数"></a>其它配置参数</h4><table><thead><tr><th>序号</th><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>sync</td><td>同步写操作，数据写入存储设备后返回成功信息。默认</td></tr><tr><td>2</td><td>async</td><td>异步写提作，数据在未完全写入存储设备前就返回成功信息，实际还在内存，</td></tr><tr><td>3</td><td>wdelay</td><td>延迟写入选项，将多个写提请求合并后写入硬盘，减少 I/O 次数， NFS 非正常关闭数据可能丢失。默认</td></tr><tr><td>4</td><td>no_wdelay</td><td>与上相反，不与 async 同时生效，如果 NFS 服务器主要收到小且不相关的请求，该选项实际会降低性能</td></tr><tr><td>5</td><td>subtree</td><td>若输出目录是一个子目录，则 NFS 服务器将检查其父目录的权限。默认</td></tr><tr><td>6</td><td>no_subtree</td><td>即使输出目录是一个子目录， NFS 服务器也不检查其父目录的权限，这样可以提高效率</td></tr><tr><td>7</td><td>secure</td><td>限制客户端只能从小于 1024 的 TCP/IP 端口连接 NFS 服务器。默认</td></tr><tr><td>8</td><td>insecure</td><td>允许客户端从大于 1024 的 TCP/IP 端口连接服务器</td></tr></tbody></table><h2 id="安装-NFS-服务端"><a href="#安装-NFS-服务端" class="headerlink" title="安装 NFS 服务端"></a>安装 NFS 服务端</h2><p>由于 NFS 是一套分布式文件系统，我们再创建一台独立的虚拟机作为我们 NFS 服务端，配置如下</p><table><thead><tr><th>主机名</th><th>IP</th><th>系统</th><th>CPU/内存</th><th>磁盘</th></tr></thead><tbody><tr><td>kubernetes-volumes</td><td>192.168.141.140</td><td>Ubuntu Server 18.04</td><td>2核2G</td><td>20G</td></tr></tbody></table><ul><li>创建一个目录作为共享文件目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/volumes</span><br></pre></td></tr></table></figure><ul><li>给目录增加读写权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+rw /usr/<span class="built_in">local</span>/kubernetes/volumes</span><br></pre></td></tr></table></figure><ul><li>安装 NFS 服务端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y nfs-kernel-server</span><br></pre></td></tr></table></figure><ul><li>配置 NFS 服务目录，打开文件</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/exports</span><br></pre></td></tr></table></figure><p>  ，在尾部新增一行，内容如下</p><ul><li><code>/usr/local/kubernetes/volumes</code>：作为服务目录向客户端开放</li><li>*：表示任何 IP 都可以访问</li><li>rw：读写权限</li><li>sync：同步权限</li><li>no_subtree_check：表示如果输出目录是一个子目录，NFS 服务器不检查其父目录的权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kubernetes/volumes *(rw,sync,no_subtree_check)</span><br></pre></td></tr></table></figure><ul><li>重启服务，使配置生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nfs-kernel-server restart</span><br></pre></td></tr></table></figure><h2 id="安装-NFS-客户端"><a href="#安装-NFS-客户端" class="headerlink" title="安装 NFS 客户端"></a>安装 NFS 客户端</h2><p>安装客户端的目的是验证是否可以上传文件到服务端，安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y nfs-common</span><br></pre></td></tr></table></figure><ul><li>创建 NFS 客户端挂载目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/volumes-mount</span><br></pre></td></tr></table></figure><ul><li>将 NFS 服务器的 <code>/usr/local/kubernetes/volumes</code> 目录挂载到 NFS 客户端的 <code>/usr/local/kubernetes/volumes-mount</code> 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 192.168.141.140:/usr/<span class="built_in">local</span>/kubernetes/volumes /usr/<span class="built_in">local</span>/kubernetes/volumes-mount</span><br></pre></td></tr></table></figure><ul><li>使用 <code>df</code> 命令查看挂载信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Filesystem                                    1K-blocks    Used Available Use% Mounted on</span><br><span class="line">udev                                             977556       0    977556   0% /dev</span><br><span class="line">tmpfs                                            201732    1252    200480   1% /run</span><br><span class="line">/dev/mapper/ubuntu--vg-ubuntu--lv              19475088 5490916  12971848  30% /</span><br><span class="line">tmpfs                                           1008648       0   1008648   0% /dev/shm</span><br><span class="line">tmpfs                                              5120       0      5120   0% /run/lock</span><br><span class="line">tmpfs                                           1008648       0   1008648   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0                                        90624   90624         0 100% /snap/core/6964</span><br><span class="line">/dev/loop1                                        93184   93184         0 100% /snap/core/6350</span><br><span class="line">/dev/sda2                                        999320  214252    716256  24% /boot</span><br><span class="line">tmpfs                                            201728       0    201728   0% /run/user/0</span><br><span class="line"><span class="comment"># 有此输出表示挂载成功</span></span><br><span class="line">193.192.168.141.140:/usr/<span class="built_in">local</span>/kubernetes/volumes  19475200 5490944  12972032  30% /usr/<span class="built_in">local</span>/kubernetes/volumes-mount</span><br></pre></td></tr></table></figure><h2 id="验证-NFS-服务"><a href="#验证-NFS-服务" class="headerlink" title="验证 NFS 服务"></a>验证 NFS 服务</h2><ul><li>测试文件上传</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr &gt; /usr/<span class="built_in">local</span>/kubernetes/volumes-mount/test.txt</span><br></pre></td></tr></table></figure><p>查看 <code>/usr/local/kubernetes/volumes</code> 目录下是否有 <code>test.txt</code> 文件，有则表示成功</p><h2 id="取消-NFS-客户端挂载"><a href="#取消-NFS-客户端挂载" class="headerlink" title="取消 NFS 客户端挂载"></a>取消 NFS 客户端挂载</h2><blockquote><p><strong>注意：</strong> 不要直接在挂载目录下执行，否则会报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /usr/<span class="built_in">local</span>/kubernetes/volumes-mount</span><br></pre></td></tr></table></figure><h2 id="PV-与-PVC"><a href="#PV-与-PVC" class="headerlink" title="PV 与 PVC"></a>PV 与 PVC</h2><p>PV 是集群的资源。PVC 是对这一资源的请求，也是对资源的所有权的检验。PV 和 PVC 之间的互动遵循如下的生命周期。</p><ul><li><strong>供应：</strong> 集群管理员会创建一系列的 PV。这些 PV 包含了为集群用户提供的真实存储资源，它们可利用 Kubernetes API 来消费。</li><li><strong>绑定：</strong> 用户创建一个包含了容量和访问模式的持久卷申请。Master 会监听 PVC 的产生，并尝试根据请求内容查找匹配的 PV，并把 PV 和 PVC 进行绑定。用户能够获取满足需要的资源，并且在使用过程中可能超出请求数量。如果找不到合适的卷，这一申请就会持续处于非绑定状态，一直到出现合适的 PV。例如一个集群准备了很多的 50G 大小的持久卷，（虽然总量足够）也是无法响应 100G 的申请的，除非把 100G 的 PV 加入集群。</li><li><strong>使用：</strong> Pod 把申请作为卷来使用。集群会通过 PVC 查找绑定的 PV，并 Mount 给 Pod。对于支持多种访问方式的卷，用户在使用 PVC 作为卷的时候，可以指定需要的访问方式。一旦用户拥有了一个已经绑定的 PVC，被绑定的 PV 就归该用户所有了。用户的 Pods 能够通过在 Pod 的卷中包含的 PVC 来访问他们占有的 PV。</li><li><strong>释放：</strong> 当用户完成对卷的使用时，就可以利用 API 删除 PVC 对象了，而且他还可以重新申请。删除 PVC 后，对应的卷被视为 “被释放”，但是这时还不能给其他的 PVC 使用。之前的 PVC 数据还保存在卷中，要根据策略来进行后续处理。</li><li><strong>回收：</strong> PV 的回收策略向集群阐述了在 PVC 释放卷的时候，应如何进行后续工作。目前可以采用三种策略：保留，回收或者删除。保留策略允许重新申请这一资源。在持久卷能够支持的情况下，删除策略会同时删除持久卷以及 AWS EBS/GCE PD 或者 Cinder 卷中的存储内容。如果插件能够支持，回收策略会执行基础的擦除操作（<code>rm -rf /thevolume/*</code>），这一卷就能被重新申请了。</li></ul><h2 id="定义-PV"><a href="#定义-PV" class="headerlink" title="定义 PV"></a>定义 PV</h2><h3 id="持久卷插件"><a href="#持久卷插件" class="headerlink" title="持久卷插件"></a>持久卷插件</h3><p>持久卷是以插件方式实现的，目前支持的插件如下：</p><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li><strong>NFS（我们采用的是该方案）</strong></li><li>iSCSI</li><li>RBD (Ceph Block Device)</li><li>Glusterfs</li><li>HostPath (单节点测试使用)</li><li>本地持久卷</li></ul><h3 id="YAML-配置"><a href="#YAML-配置" class="headerlink" title="YAML 配置"></a>YAML 配置</h3><p>创建一个名为 <code>nfs-pv-mysql.yml</code> 的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nfs-pv-mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 设置容量</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">5</span><span class="string">Gi</span></span><br><span class="line">  <span class="comment"># 访问模式</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line">    <span class="comment"># 该卷能够以读写模式被多个节点同时加载</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="comment"># 回收策略，这里是基础擦除 `rm-rf/thevolume/*`</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line">    <span class="comment"># NFS 服务端配置的路径</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">"/usr/local/kubernetes/volumes"</span></span><br><span class="line">    <span class="comment"># NFS 服务端地址</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">192.168</span><span class="number">.141</span><span class="number">.140</span></span><br><span class="line"><span class="attr">    readOnly:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f nfs-pv-mysql.yml</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f nfs-pv-mysql.yml</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pv</span><br><span class="line">NAME           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv-mysql   5Gi        RWX            Recycle          Available                                   29m</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="Capacity（容量）"><a href="#Capacity（容量）" class="headerlink" title="Capacity（容量）"></a>Capacity（容量）</h4><p>一般来说，PV 会指定存储容量。这里需要使用 PV 的 capcity 属性。目前存储大小是唯一一个能够被申请的指标，今后会加入更多属性，例如 IOPS，吞吐能力等</p><h4 id="AccessModes（访问模式）"><a href="#AccessModes（访问模式）" class="headerlink" title="AccessModes（访问模式）"></a>AccessModes（访问模式）</h4><p>只要资源提供者支持，持久卷能够被用任何方式加载到主机上。每种存储都会有不同的能力，每个 PV 的访问模式也会被设置成为该卷所支持的特定模式。例如 NFS 能够支持多个读写客户端，但是某个 NFS PV 可能会在服务器上以只读方式使用。每个 PV 都有自己的一系列的访问模式，这些访问模式取决于 PV 的能力。访问模式的可选范围如下：</p><ul><li>ReadWriteOnce：该卷能够以读写模式被加载到一个节点上</li><li>ReadOnlyMany：该卷能够以只读模式加载到多个节点上</li><li>ReadWriteMany：该卷能够以读写模式被多个节点同时加载</li></ul><p>在 CLI 下，访问模式缩写为：</p><ul><li>RWO：ReadWriteOnce</li><li>ROX：ReadOnlyMany</li><li>RWX：ReadWriteMany</li></ul><p>另外，一个卷不论支持多少种访问模式，同时只能以一种访问模式加载。例如一个 GCE Persistent Disk 既能支持 ReadWriteOnce，也能支持 ReadOnlyMany</p><h4 id="RecyclingPolicy（回收策略）"><a href="#RecyclingPolicy（回收策略）" class="headerlink" title="RecyclingPolicy（回收策略）"></a>RecyclingPolicy（回收策略）</h4><p>当前的回收策略可选值包括：</p><ul><li>Retain：人工重新申请</li><li>Recycle：基础擦除（<code>rm-rf/thevolume/*</code>）</li><li>Delete：相关的存储资产例如 AWS EBS，GCE PD 或者 OpenStack Cinder 卷一并删除</li></ul><p>目前，只有 NFS 和 HostPath 支持 Recycle 策略，AWS EBS、GCE PD 以及 Cinder 卷支持 Delete 策略</p><h4 id="阶段（Phase）"><a href="#阶段（Phase）" class="headerlink" title="阶段（Phase）"></a>阶段（Phase）</h4><p>一个卷会处于如下阶段之一：</p><ul><li>Available：可用资源，尚未被绑定到 PVC 上</li><li>Bound：该卷已经被绑定</li><li>Released：PVC 已经被删除，但该资源尚未被集群回收</li><li>Failed：该卷的自动回收过程失败</li></ul><h2 id="定义-PVC"><a href="#定义-PVC" class="headerlink" title="定义 PVC"></a>定义 PVC</h2><p>创建一个名为 <code>nfs-pvc-mysql-test.yml</code> 的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nfs-pvc-mysql-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line">  <span class="comment"># 需要使用和 PV 一致的访问模式</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="comment"># 按需分配资源</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">     requests:</span></span><br><span class="line"><span class="attr">       storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f nfs-pvc-mysql-test.yml</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f nfs-pvc-mysql-test.yml</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure><h2 id="部署-MySQL8"><a href="#部署-MySQL8" class="headerlink" title="部署 MySQL8"></a>部署 MySQL8</h2><blockquote><p><strong>注意：</strong> 要确保每台 Node 都安装了 NFS 客户端，<code>apt-get install -y nfs-common</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="comment"># 只有镜像不存在时，才会进行镜像拉取</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">3306</span></span><br><span class="line">          <span class="comment"># 同 Docker 配置中的 environment</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">"123456"</span></span><br><span class="line">          <span class="comment"># 容器中的挂载目录</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">nfs-vol-test</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line">        <span class="comment"># 挂载到数据卷</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nfs-vol-test</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">nfs-pvc-mysql-test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">db-test</span></span><br></pre></td></tr></table></figure><h3 id="解决权限问题"><a href="#解决权限问题" class="headerlink" title="解决权限问题"></a>解决权限问题</h3><p>当你使用 <code>kubectl create -f &lt;YAML&gt;</code> 部署后，你会发现 Pod 状态为 Error，容器无法正常启动的情况，我们可以使用 <code>kubectl logs &lt;Pod Name&gt;</code> 看到一条日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown: changing ownership of &apos;/var/lib/mysql/&apos;: Operation not permitted</span><br></pre></td></tr></table></figure><p>解决方案是在 NFS 服务端配置中增加一个参数 <code>no_root_squash</code>，即将配置修改为：<code>/usr/local/kubernetes/volumes *(rw,sync,no_subtree_check,no_root_squash)</code></p><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><p>部署成功后可以使用 <code>kubectl get service</code> 查看我们 MySQL 的运行端口，再使用连接工具连接会报如下错误</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gyfpzrl2j30ge05st8z.jpg" alt=""></p><p>意思为无法使用密码的方式登录，在 Docker 部署时我们可以在 YAML 中配置相关参数解决这个问题；下一节我们讲解在 Kubernetes 中采用 <strong>ConfigMap</strong> 的方式配置 MySQL</p><h2 id="附：ImagePullPolicy"><a href="#附：ImagePullPolicy" class="headerlink" title="附：ImagePullPolicy"></a>附：ImagePullPolicy</h2><p>支持三种 ImagePullPolicy</p><ul><li><strong>Always：</strong> 不管镜像是否存在都会进行一次拉取</li><li><strong>Never：</strong> 不管镜像是否存在都不会进行拉取</li><li><strong>IfNotPresent：</strong> 只有镜像不存在时，才会进行镜像拉取</li></ul><p>注意</p><ul><li>默认为 <code>IfNotPresent</code>，但 <code>:latest</code> 标签的镜像默认为 <code>Always</code></li><li>拉取镜像时 Docker 会进行校验，如果镜像中的 MD5 码没有变，则不会拉取镜像数据</li><li>生产环境中应该尽量避免使用 <code>:latest</code> 标签，而开发环境中可以借助 <code>:latest</code> 标签自动拉取最新的镜像</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在 Docker 中就有数据卷的概念，当容器删除时，数据也一起会被删除，想要持久化使用数据，需要把主机上的目录挂载到 Docker 中去，在 K8S 中，数据卷是通过 Pod 实现持久化的，如果 Pod 删除，数据卷也会一起删除，k8s 的数据卷是 docker 数据卷的扩展，K8S 适配各种存储系统，包括本地存储 EmptyDir，HostPath， 网络存储（NFS，GlusterFS，PV/PVC）等。&lt;/p&gt;
&lt;p&gt;我们以部署 MySQL8 为例，采用 &lt;strong&gt;NFS + PV/PVC&lt;/strong&gt; 网络存储方案实现我们的 Kubernetes 数据持久化。&lt;/p&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Ingress 统一访问入口</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Ingress%20%E7%BB%9F%E4%B8%80%E8%AE%BF%E9%97%AE%E5%85%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Ingress 统一访问入口/</id>
    <published>2019-06-28T08:23:20.192Z</published>
    <updated>2019-06-28T08:27:09.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><strong>节点：</strong> Kubernetes 集群中的服务器</li><li><strong>集群：</strong> Kubernetes 管理的一组服务器集合</li><li><strong>边界路由器：</strong> 为局域网和 Internet 路由数据包的路由器，执行防火墙保护局域网络</li><li><strong>集群网络：</strong> 遵循 Kubernetes 网络模型实现集群内的通信的具体实现，比如 Flannel 和 Calico</li><li><strong>服务：</strong> Kubernetes 的服务 (Service) 是使用标签选择器标识的一组 Pod Service (Deployment)。 <strong>除非另有说明，否则服务的虚拟 IP 仅可在集群内部访问</strong></li></ul><a id="more"></a><h2 id="内部访问方式-ClusterIP"><a href="#内部访问方式-ClusterIP" class="headerlink" title="内部访问方式 ClusterIP"></a>内部访问方式 ClusterIP</h2><p>ClusterIP 服务是 Kubernetes 的默认服务。它给你一个集群内的服务，集群内的其它应用都可以访问该服务。集群外部无法访问它。在某些场景下我们可以使用 Kubernetes 的 Proxy 模式来访问服务，比如调试服务时。</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gy5e0fkmj30ec0fc3ym.jpg" alt=""></p><h2 id="三种外部访问方式"><a href="#三种外部访问方式" class="headerlink" title="三种外部访问方式"></a>三种外部访问方式</h2><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>NodePort 服务是引导外部流量到你的服务的最原始方式。NodePort，正如这个名字所示，<strong>在所有节点（虚拟机）上开放一个特定端口</strong>，任何发送到该端口的流量都被转发到对应服务。</p><p>NodePort 服务特征如下：</p><ul><li>每个端口只能是一种服务</li><li>端口范围只能是 30000-32767（可调）</li><li>不在 YAML 配置文件中指定则会分配一个默认端口</li></ul><blockquote><p><strong>建议：</strong> 不要在生产环境中使用这种方式暴露服务，大多数时候我们应该让 Kubernetes 来选择端口</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gy5ryap7j30ec0hbwer.jpg" alt=""></p><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>LoadBalancer 服务是暴露服务到 Internet 的标准方式。所有通往你指定的端口的流量都会被转发到对应的服务。它没有过滤条件，没有路由等。这意味着你几乎可以发送任何种类的流量到该服务，像 HTTP，TCP，UDP，WebSocket，gRPC 或其它任意种类。</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gy673i49j30ec0fc3ym.jpg" alt=""></p><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>Ingress 事实上不是一种服务类型。相反，它处于多个服务的前端，扮演着 “智能路由” 或者集群入口的角色。你可以用 Ingress 来做许多不同的事情，各种不同类型的 Ingress 控制器也有不同的能力。它允许你基于路径或者子域名来路由流量到后端服务。</p><p>Ingress 可能是暴露服务的最强大方式，但同时也是最复杂的。Ingress 控制器有各种类型，包括 Google Cloud Load Balancer， Nginx，Contour，Istio，等等。它还有各种插件，比如 cert-manager (它可以为你的服务自动提供 SSL 证书)/</p><p>如果你想要使用同一个 IP 暴露多个服务，这些服务都是使用相同的七层协议（典型如 HTTP），你还可以获取各种开箱即用的特性（比如 SSL、认证、路由等等）</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gy6id2k2j314w0gxjrs.jpg" alt=""></p><h2 id="什么是-Ingress"><a href="#什么是-Ingress" class="headerlink" title="什么是 Ingress"></a>什么是 Ingress</h2><p>通常情况下，Service 和 Pod 的 IP 仅可在集群内部访问。集群外部的请求需要通过负载均衡转发到 Service 在 Node 上暴露的 NodePort 上，然后再由 kube-proxy 通过边缘路由器 (edge router) 将其转发给相关的 Pod 或者丢弃。而 Ingress 就是为进入集群的请求提供路由规则的集合</p><p>Ingress 可以给 Service 提供集群外部访问的 URL、负载均衡、SSL 终止、HTTP 路由等。为了配置这些 Ingress 规则，集群管理员需要部署一个 Ingress Controller，它监听 Ingress 和 Service 的变化，并根据规则配置负载均衡并提供访问入口。</p><h2 id="使用-Nginx-Ingress-Controller"><a href="#使用-Nginx-Ingress-Controller" class="headerlink" title="使用 Nginx Ingress Controller"></a>使用 Nginx Ingress Controller</h2><p>本次实践的主要目的就是将入口统一，不再通过 LoadBalancer 等方式将端口暴露出来，而是使用 Ingress 提供的反向代理负载均衡功能作为我们的唯一入口。通过以下步骤操作仔细体会。</p><blockquote><p><strong>注意：</strong> 下面包含资源配置的步骤都是自行创建 YAML 配置文件通过 <code>kubectl create -f &lt;YAML&gt;</code> 和 <code>kubectl delete -f &lt;YAML&gt;</code> 部署和删除</p></blockquote><h3 id="部署-Tomcat"><a href="#部署-Tomcat" class="headerlink" title="部署 Tomcat"></a>部署 Tomcat</h3><p>部署 Tomcat 但仅允许在内网访问，我们要通过 Ingress 提供的反向代理功能路由到 Tomcat 之上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tomcat-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tomcat-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># ClusterIP, NodePort, LoadBalancer</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure><h3 id="安装-Nginx-Ingress-Controller"><a href="#安装-Nginx-Ingress-Controller" class="headerlink" title="安装 Nginx Ingress Controller"></a>安装 Nginx Ingress Controller</h3><p>Ingress Controller 有许多种，我们选择最熟悉的 Nginx 来处理请求，其它可以参考 <a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noopener">官方文档</a></p><ul><li>下载 Nginx Ingress Controller 配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml</span><br></pre></td></tr></table></figure><ul><li>修改配置文件，找到配置如下位置 (搜索 <code>serviceAccountName</code>) 在下面增加一句 <code>hostNetwork: true</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 可以部署多个实例</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line">      <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line">        <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">prometheus.io/port:</span> <span class="string">"10254"</span></span><br><span class="line">        <span class="string">prometheus.io/scrape:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">      <span class="comment"># 增加 hostNetwork: true，意思是开启主机网络模式，暴露 Nginx 服务端口 80</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line"><span class="string">//</span> <span class="string">以下代码省略...</span></span><br></pre></td></tr></table></figure><h3 id="部署-Ingress"><a href="#部署-Ingress" class="headerlink" title="部署 Ingress"></a>部署 Ingress</h3><p>Ingress 翻译过来是入口的意思，说白了就是个 API 网关（想想之前学的 Zuul 和 Spring Cloud Gateway）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-web</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="comment"># 指定 Ingress Controller 的类型</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="comment"># 指定我们的 rules 的 path 可以使用正则表达式</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/use-regex:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="comment"># 连接超时时间，默认为 5s</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="comment"># 后端服务器回转数据超时时间，默认为 60s</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="comment"># 后端服务器响应超时时间，默认为 60s</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="comment"># 客户端上传文件，最大大小，默认为 20m</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">"10m"</span></span><br><span class="line">    <span class="comment"># URL 重写</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line">  <span class="comment"># 主机名，只能是域名，修改为你自己的</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">k8s.test.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line">          <span class="comment"># 后台部署的 Service Name，与上面部署的 Tomcat 对应</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">tomcat-http</span></span><br><span class="line">          <span class="comment"># 后台部署的 Service Port，与上面部署的 Tomcat 对应</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><h3 id="查看-Tomcat"><a href="#查看-Tomcat" class="headerlink" title="查看 Tomcat"></a>查看 Tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">tomcat-app   2/2     2            2           88m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes    ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    2d5h</span><br><span class="line">tomcat-http   ClusterIP   10.97.222.179   &lt;none&gt;        8080/TCP   89m</span><br></pre></td></tr></table></figure><h3 id="查看-Nginx-Ingress-Controller"><a href="#查看-Nginx-Ingress-Controller" class="headerlink" title="查看 Nginx Ingress Controller"></a>查看 Nginx Ingress Controller</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n ingress-nginx -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，注意下面的 IP 地址，就是我们实际访问地址</span></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE   IP                NODE                 NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-ingress-controller-76f9fddcf8-vzkm5   1/1     Running   0</span><br></pre></td></tr></table></figure><h3 id="查看-Ingress"><a href="#查看-Ingress" class="headerlink" title="查看 Ingress"></a>查看 Ingress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ingress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME        HOSTS          ADDRESS   PORTS   AGE</span><br><span class="line">nginx-web   k8s.test.com             80      61m</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>成功代理到 Tomcat 即表示成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不设置 Hosts 的方式请求地址，下面的 IP 和 Host 均在上面有配置</span></span><br><span class="line">curl -v http://192.168.141.160 -H <span class="string">'host: k8s.test.com'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点：&lt;/strong&gt; Kubernetes 集群中的服务器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群：&lt;/strong&gt; Kubernetes 管理的一组服务器集合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边界路由器：&lt;/strong&gt; 为局域网和 Internet 路由数据包的路由器，执行防火墙保护局域网络&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群网络：&lt;/strong&gt; 遵循 Kubernetes 网络模型实现集群内的通信的具体实现，比如 Flannel 和 Calico&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务：&lt;/strong&gt; Kubernetes 的服务 (Service) 是使用标签选择器标识的一组 Pod Service (Deployment)。 &lt;strong&gt;除非另有说明，否则服务的虚拟 IP 仅可在集群内部访问&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>通过资源配置运行容器</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E9%80%9A%E8%BF%87%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/06/28/k8s/通过资源配置运行容器/</id>
    <published>2019-06-28T08:20:27.614Z</published>
    <updated>2019-06-28T08:23:41.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们知道通过 <code>run</code> 命令启动容器非常麻烦，Docker 提供了 Compose 为我们解决了这个问题。那 Kubernetes 是如何解决这个问题的呢？其实很简单，使用 <code>kubectl create</code> 命令就可以做到和 Compose 一样的效果了，该命令可以通过配置文件快速创建一个集群资源对象。</p><h2 id="创建-YAML-配置文件"><a href="#创建-YAML-配置文件" class="headerlink" title="创建 YAML 配置文件"></a>创建 YAML 配置文件</h2><p>以部署 Nginx 为例</p><h3 id="部署-Deployment"><a href="#部署-Deployment" class="headerlink" title="部署 Deployment"></a>部署 Deployment</h3><p>创建一个名为 <code>nginx-deployment.yml</code> 的配置文件</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API 版本号</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="comment"># 类型，如：Pod/ReplicationController/Deployment/Service/Ingress</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="comment"># 元数据</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># Kind 的名称</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 部署的实例数量</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line">        <span class="comment"># 容器标签的名字，发布 Service 时，selector 需要和这里对应</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line">      <span class="comment"># 配置容器，数组类型，说明可以配置多个容器</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line">      <span class="comment"># 容器名称</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="comment"># 容器镜像</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="comment"># 暴露端口</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line">        <span class="comment"># Pod 端口</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f nginx-deployment.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f nginx-deployment.yml</span><br></pre></td></tr></table></figure><h3 id="发布-Service"><a href="#发布-Service" class="headerlink" title="发布 Service"></a>发布 Service</h3><p>创建一个名为 <code>nginx-service.yml</code> 的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API 版本号</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># 类型，如：Pod/ReplicationController/Deployment/Service/Ingress</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="comment"># 元数据</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># Kind 的名称</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 暴露端口</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line">    <span class="comment">## Service 暴露的端口</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment">## Pod 上的端口，这里是将 Service 暴露的端口转发到 Pod 端口上</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="comment"># 类型</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="comment"># 标签选择器</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line">    <span class="comment"># 需要和上面部署的 Deployment 标签名对应</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f nginx-service.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f nginx-service.yml</span><br></pre></td></tr></table></figure><h2 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h2><h3 id="查看-Pod-列表"><a href="#查看-Pod-列表" class="headerlink" title="查看 Pod 列表"></a>查看 Pod 列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-app-64bb598779-2pplx   1/1     Running   0          25m</span><br><span class="line">nginx-app-64bb598779-824lc   1/1     Running   0          25m</span><br></pre></td></tr></table></figure><h3 id="查看-Deployment-列表"><a href="#查看-Deployment-列表" class="headerlink" title="查看 Deployment 列表"></a>查看 Deployment 列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-app   2/2     2            2           25m</span><br></pre></td></tr></table></figure><h3 id="查看-Service-列表"><a href="#查看-Service-列表" class="headerlink" title="查看 Service 列表"></a>查看 Service 列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1      &lt;none&gt;        443/TCP        20h</span><br><span class="line">nginx-http    LoadBalancer   10.98.49.142   &lt;pending&gt;     80:31631/TCP   14m</span><br></pre></td></tr></table></figure><h3 id="查看-Service-详情"><a href="#查看-Service-详情" class="headerlink" title="查看 Service 详情"></a>查看 Service 详情</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe service nginx-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Name:                     nginx-http</span><br><span class="line">Namespace:                default</span><br><span class="line">Labels:                   &lt;none&gt;</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 name=nginx</span><br><span class="line">Type:                     LoadBalancer</span><br><span class="line">IP:                       10.98.49.142</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  31631/TCP</span><br><span class="line">Endpoints:                10.244.141.205:80,10.244.2.4:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="通过浏览器访问"><a href="#通过浏览器访问" class="headerlink" title="通过浏览器访问"></a>通过浏览器访问</h3><p>通过浏览器访问 <a href="http://192.168.141.150:31631/" target="_blank" rel="noopener">http://192.168.141.150:31631/</a> ，出现 Nginx 欢迎页即表示成功</p><h2 id="集成环境部署"><a href="#集成环境部署" class="headerlink" title="集成环境部署"></a>集成环境部署</h2><p>也可以不区分配置文件，一次性部署 Deployment 和 Service，创建一个名为 <code>nginx.yml</code> 的配置文件，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment"># 可以指定 NodePort 端口，默认范围是：30000-32767</span></span><br><span class="line">      <span class="comment"># nodePort: 30080</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f nginx.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f nginx.yml</span><br></pre></td></tr></table></figure><h2 id="附：修改默认的端口范围"><a href="#附：修改默认的端口范围" class="headerlink" title="附：修改默认的端口范围"></a>附：修改默认的端口范围</h2><p>Kubernetes 服务的 NodePort 默认端口范围是 30000-32767，在某些场合下，这个限制不太适用，我们可以自定义它的端口范围，操作步骤如下：</p><p>编辑 <code>vi /etc/kubernetes/manifests/kube-apiserver.yaml</code> 配置文件，增加配置 <code>--service-node-port-range=2-65535</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">kube-apiserver</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">control-plane</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-apiserver</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="comment"># 在这里增加配置即可</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--service-node-port-range=2-65535</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--advertise-address=192.168.141.150</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--allow-privileged=true</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--authorization-mode=Node,RBAC</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--client-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--enable-admission-plugins=NodeRestriction</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--enable-bootstrap-token-auth=true</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span><br><span class="line"><span class="string">//</span> <span class="string">以下配置省略...</span></span><br></pre></td></tr></table></figure><p>使用 <code>docker ps</code> 命令找到 <code>kube-apiserver</code> 容器，再使用 <code>docker restart &lt;ApiServer 容器 ID&gt;</code> 即可生效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我们知道通过 &lt;code&gt;run&lt;/code&gt; 命令启动容器非常麻烦，Docker 提供了 Compose 为我们解决了这个问题。那 Kubernetes 是如何解决这个问题的呢？其实很简单，使用 &lt;code&gt;kubectl create&lt;/code&gt; 命令就可以做到和 Compose 一样的效果了，该命令可以通过配置文件快速创建一个集群资源对象。&lt;/p&gt;
&lt;h2 id=&quot;创建-YAML-配置文件&quot;&gt;&lt;a href=&quot;#创建-YAML-配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建 YAML 配置文件&quot;&gt;&lt;/a&gt;创建 YAML 配置文件&lt;/h2&gt;&lt;p&gt;以部署 Nginx 为例&lt;/p&gt;
&lt;h3 id=&quot;部署-Deployment&quot;&gt;&lt;a href=&quot;#部署-Deployment&quot; class=&quot;headerlink&quot; title=&quot;部署 Deployment&quot;&gt;&lt;/a&gt;部署 Deployment&lt;/h3&gt;&lt;p&gt;创建一个名为 &lt;code&gt;nginx-deployment.yml&lt;/code&gt; 的配置文件&lt;/p&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>解决 Node 无法加入的问题</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E8%A7%A3%E5%86%B3%20Node%20%E6%97%A0%E6%B3%95%E5%8A%A0%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/28/k8s/解决 Node 无法加入的问题/</id>
    <published>2019-06-28T08:15:35.105Z</published>
    <updated>2019-06-28T08:20:50.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我们使用 <code>kubeadm join</code> 命令将 Node 节点加入集群时，你会发现所有 <code>kubectl</code> 命令均不可用（呈现阻塞状态，并不会返回响应结果），我们可以在 Node 节点中通过 <code>kubeadm reset</code> 命令将 Node 节点下线，此时回到 Master 节点再使用 <code>watch kubectl get pods --all-namespaces</code> 可以看到下图中报错了，<code>coredns-xxx-xxx</code> 状态为 <code>CrashLoopBackOff</code></p><a id="more"></a><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gxx2h69hj30yd0ev3zq.jpg" alt=""></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>从上面的错误信息不难看出应该是出现了网络问题，而我们在安装过程中只使用了一个网络插件 <strong>Calico</strong> ，那么该错误是不是由 Calico 引起的呢？带着这个疑问我们去到 Calico 官网再看一下它的说明，官网地址：<a href="https://docs.projectcalico.org/v3.7/getting-started/kubernetes/" target="_blank" rel="noopener">https://docs.projectcalico.org/v3.7/getting-started/kubernetes/</a></p><p>在它的 Quickstart 里有两段话（属于特别提醒），截图如下：</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gxxgrqb7j30wb07mt99.jpg" alt=""></p><p>上面这段话的主要意思是：当 <code>kubeadm</code> 安装完成后不要关机，继续完成后续的安装步骤；这也说明了安装 Kubernetes 的过程不要出现中断一口气搞定（不过这不是重点）(*￣rǒ￣)</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gxxz3m2gj30x30i775p.jpg" alt=""></p><p>上面这段话的主要意思是：如果你的网络在 <code>192.168.0.0/16</code> 网段中，则必须选择一个不同的 Pod 网络；恰巧咱们的网络范围（我虚拟机的 IP 范围是 <code>192.168.141.0/24</code>）和该网段重叠 (ノへ￣、)；好吧，当时做单节点集群时因为没啥问题而忽略了 ♪(^∇^*)</p><p>so，能够遇到这个问题主要是因为虚拟机 IP 范围刚好和 Calico 默认网段重叠导致的，所以想要解决这个问题，咱们就需要修改 Calico 的网段了（当然也可以改虚拟机的），换句话说就是大家重装一下 o (一︿一 +) o</p><p><strong>按照以下标准步骤重装即可</strong></p><h2 id="重置-Kubernetes"><a href="#重置-Kubernetes" class="headerlink" title="重置 Kubernetes"></a>重置 Kubernetes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">[reset] WARNING: Changes made to this host by <span class="string">'kubeadm init'</span> or <span class="string">'kubeadm join'</span> will be reverted.</span><br><span class="line">[reset] Are you sure you want to proceed? [y/N]: y</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">W0604 01:55:28.517280   22688 reset.go:234] [reset] No kubeadm config, using etcd pod spec to get data directory</span><br><span class="line">[reset] No etcd config found. Assuming external etcd</span><br><span class="line">[reset] Please manually reset etcd to prevent further issues</span><br><span class="line">[reset] Stopping the kubelet service</span><br><span class="line">[reset] unmounting mounted directories <span class="keyword">in</span> <span class="string">"/var/lib/kubelet"</span></span><br><span class="line">[reset] Deleting contents of stateful directories: [/var/lib/kubelet /etc/cni/net.d /var/lib/dockershim /var/run/kubernetes]</span><br><span class="line">[reset] Deleting contents of config directories: [/etc/kubernetes/manifests /etc/kubernetes/pki]</span><br><span class="line">[reset] Deleting files: [/etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/bootstrap-kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf]</span><br><span class="line"></span><br><span class="line">The reset process does not reset or clean up iptables rules or IPVS tables.</span><br><span class="line">If you wish to reset iptables, you must <span class="keyword">do</span> so manually.</span><br><span class="line">For example:</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br><span class="line"></span><br><span class="line">If your cluster was setup to utilize IPVS, run ipvsadm --clear (or similar)</span><br><span class="line">to reset your system<span class="string">'s IPVS tables.</span></span><br></pre></td></tr></table></figure><h2 id="删除-kubectl-配置"><a href="#删除-kubectl-配置" class="headerlink" title="删除 kubectl 配置"></a>删除 kubectl 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -fr ~/.kube/</span><br></pre></td></tr></table></figure><h2 id="启用-IPVS"><a href="#启用-IPVS" class="headerlink" title="启用 IPVS"></a>启用 IPVS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><h2 id="导出并修改配置文件"><a href="#导出并修改配置文件" class="headerlink" title="导出并修改配置文件"></a>导出并修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure><p>配置文件修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="attr">- groups:</span></span><br><span class="line"><span class="attr">  - system:</span><span class="attr">bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line"><span class="attr">  ttl:</span> <span class="number">24</span><span class="string">h0m0s</span></span><br><span class="line"><span class="attr">  usages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">signing</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">192.168</span><span class="number">.141</span><span class="number">.150</span></span><br><span class="line"><span class="attr">  bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line"><span class="attr">  criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-master-01</span></span><br><span class="line"><span class="attr">  taints:</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line"><span class="attr">  timeoutForControlPlane:</span> <span class="number">4</span><span class="string">m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">"192.168.141.200:6444"</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.14.2</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="comment"># 主要修改在这里，替换 Calico 网段为我们虚拟机不重叠的网段（这里用的是 Flannel 默认网段）</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="string">"10.244.0.0/16"</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line"><span class="attr">  SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure><h2 id="kubeadm-初始化"><a href="#kubeadm-初始化" class="headerlink" title="kubeadm 初始化"></a>kubeadm 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">[init] Using Kubernetes version: v1.14.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"front-proxy-ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-01 localhost] and IPs [192.168.141.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-01 localhost] and IPs [192.168.141.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.141.150 192.168.141.200]</span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"sa"</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig file</span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[kubeconfig] Writing <span class="string">"kubelet.conf"</span> kubeconfig file</span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig file</span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[<span class="built_in">wait</span>-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">"/etc/kubernetes/manifests"</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 24.507568 seconds</span><br><span class="line">[upload-config] storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">"kubelet-config-1.14"</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-certs"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">a662b8364666f82c93cc5cd4fb4fabb623bbe9afdb182da353ac40f1752dfa4a</span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master-01 as control-plane by adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master-01 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: abcdef.0123456789abcdef</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] creating the <span class="string">"cluster-info"</span> ConfigMap <span class="keyword">in</span> the <span class="string">"kube-public"</span> namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of the control-plane node running the following <span class="built_in">command</span> on each as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2ea8c138021fb1e184a24ed2a81c16c92f9f25c635c73918b1402df98f9c8aad \</span><br><span class="line">    --experimental-control-plane --certificate-key a662b8364666f82c93cc5cd4fb4fabb623bbe9afdb182da353ac40f1752dfa4a</span><br><span class="line"></span><br><span class="line">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span><br><span class="line">As a safeguard, uploaded-certs will be deleted <span class="keyword">in</span> two hours; If necessary, you can use </span><br><span class="line"><span class="string">"kubeadm init phase upload-certs --experimental-upload-certs"</span> to reload certs afterward.</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2ea8c138021fb1e184a24ed2a81c16c92f9f25c635c73918b1402df98f9c8aad</span><br></pre></td></tr></table></figure><h2 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 kubectl</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h2 id="下载-Calico-配置文件并修改"><a href="#下载-Calico-配置文件并修改" class="headerlink" title="下载 Calico 配置文件并修改"></a>下载 Calico 配置文件并修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://docs.projectcalico.org/v3.7/manifests/calico.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi calico.yaml</span><br></pre></td></tr></table></figure><p>修改第 611 行，将 <code>192.168.0.0/16</code> 修改为 <code>10.244.0.0/16</code>，可以通过如下命令快速查找</p><ul><li><p>显示行号：<code>:set number</code></p></li><li><p>查找字符：<code>/要查找的字符</code>，输入小写 <code>n</code> 下一个匹配项，输入大写 <code>N</code> 上一个匹配项</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gxzk8lnvj30um06kglz.jpg" alt=""></p></li></ul><h2 id="安装-Calico"><a href="#安装-Calico" class="headerlink" title="安装 Calico"></a>安装 Calico</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">configmap/calico-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">daemonset.extensions/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.extensions/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br></pre></td></tr></table></figure><h2 id="加入-Master-节点"><a href="#加入-Master-节点" class="headerlink" title="加入 Master 节点"></a>加入 Master 节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例如下，别忘记两个备用节点都要加入哦</span></span><br><span class="line">kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2ea8c138021fb1e184a24ed2a81c16c92f9f25c635c73918b1402df98f9c8aad \</span><br><span class="line">    --experimental-control-plane --certificate-key a662b8364666f82c93cc5cd4fb4fabb623bbe9afdb182da353ac40f1752dfa4a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class="line">[preflight] Running pre-flight checks before initializing the new control plane instance</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">[download-certs] Downloading the certificates <span class="keyword">in</span> Secret <span class="string">"kubeadm-certs"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[certs] Using certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-02 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.141.151 192.168.141.200]</span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-02 localhost] and IPs [192.168.141.151 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master-02 localhost] and IPs [192.168.141.151 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate and key</span><br><span class="line">[certs] Valid certificates and keys now exist <span class="keyword">in</span> <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Using the existing <span class="string">"sa"</span> key</span><br><span class="line">[kubeconfig] Generating kubeconfig files</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[endpoint] WARNING: port specified <span class="keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="keyword">in</span> the controlplane address</span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">[check-etcd] Checking that the etcd cluster is healthy</span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">"kubelet-config-1.14"</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line">[etcd] Announced new etcd member joining to the existing etcd cluster</span><br><span class="line">[etcd] Wrote Static Pod manifest <span class="keyword">for</span> a <span class="built_in">local</span> etcd member to <span class="string">"/etc/kubernetes/manifests/etcd.yaml"</span></span><br><span class="line">[etcd] Waiting <span class="keyword">for</span> the new etcd member to join the cluster. This can take up to 40s</span><br><span class="line">[upload-config] storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master-02 as control-plane by adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master-02 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line"></span><br><span class="line">This node has joined the cluster and a new control plane instance was created:</span><br><span class="line"></span><br><span class="line">* Certificate signing request was sent to apiserver and approval was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line">* Control plane (master) label and taint were applied to the new node.</span><br><span class="line">* The Kubernetes control plane instances scaled up.</span><br><span class="line">* A new etcd member was added to the <span class="built_in">local</span>/stacked etcd cluster.</span><br><span class="line"></span><br><span class="line">To start administering your cluster from this node, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">        mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">        sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">        sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Run <span class="string">'kubectl get nodes'</span> to see this node join the cluster.</span><br></pre></td></tr></table></figure><h2 id="加入-Node-节点"><a href="#加入-Node-节点" class="headerlink" title="加入 Node 节点"></a>加入 Node 节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例如下</span></span><br><span class="line">kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2ea8c138021fb1e184a24ed2a81c16c92f9f25c635c73918b1402df98f9c8aad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">&gt;     --discovery-token-ca-cert-hash sha256:2ea8c138021fb1e184a24ed2a81c16c92f9f25c635c73918b1402df98f9c8aad </span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">"kubelet-config-1.14"</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">'kubectl get nodes'</span> on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><h2 id="验证是否可用"><a href="#验证是否可用" class="headerlink" title="验证是否可用"></a>验证是否可用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，我们可以看到 Node 节点已经成功上线 ━━(￣ー￣*|||━━</span></span><br><span class="line">NAME                   STATUS   ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master-01   Ready    master   19m     v1.14.2</span><br><span class="line">kubernetes-master-02   Ready    master   4m46s   v1.14.2</span><br><span class="line">kubernetes-master-03   Ready    master   3m23s   v1.14.2</span><br><span class="line">kubernetes-node-01     Ready    &lt;none&gt;   74s     v1.14.2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">watch kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，coredns 也正常运行了</span></span><br><span class="line">Every 2.0s: kubectl get pods --all-namespaces                                                                                                 kubernetes-master-01: Tue Jun  4 02:31:43 2019</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-8646dd497f-hz5xp       1/1     Running   0          9m9s</span><br><span class="line">kube-system   calico-node-2z892                              1/1     Running   0          9m9s</span><br><span class="line">kube-system   calico-node-fljxv                              1/1     Running   0          6m39s</span><br><span class="line">kube-system   calico-node-vprlw                              1/1     Running   0          5m16s</span><br><span class="line">kube-system   calico-node-xvqcx                              1/1     Running   0          3m7s</span><br><span class="line">kube-system   coredns-8686dcc4fd-5ndjm                       1/1     Running   0          21m</span><br><span class="line">kube-system   coredns-8686dcc4fd-zxtql                       1/1     Running   0          21m</span><br><span class="line">kube-system   etcd-kubernetes-master-01                      1/1     Running   0          20m</span><br><span class="line">kube-system   etcd-kubernetes-master-02                      1/1     Running   0          6m37s</span><br><span class="line">kube-system   etcd-kubernetes-master-03                      1/1     Running   0          5m14s</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master-01            1/1     Running   0          20m</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master-02            1/1     Running   0          6m37s</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master-03            1/1     Running   0          5m14s</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master-01   1/1     Running   1          20m</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master-02   1/1     Running   0          6m37s</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master-03   1/1     Running   0          5m14s</span><br><span class="line">kube-system   kube-proxy-68jqr                               1/1     Running   0          3m7s</span><br><span class="line">kube-system   kube-proxy-69bnn                               1/1     Running   0          6m39s</span><br><span class="line">kube-system   kube-proxy-vvhp5                               1/1     Running   0          5m16s</span><br><span class="line">kube-system   kube-proxy-ws6wx                               1/1     Running   0          21m</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master-01            1/1     Running   1          20m</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master-02            1/1     Running   0          6m37s</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master-03            1/1     Running   0          5m14s</span><br></pre></td></tr></table></figure><p><strong>至此，Kubernetes 高可用集群算是彻底部署成功</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;当我们使用 &lt;code&gt;kubeadm join&lt;/code&gt; 命令将 Node 节点加入集群时，你会发现所有 &lt;code&gt;kubectl&lt;/code&gt; 命令均不可用（呈现阻塞状态，并不会返回响应结果），我们可以在 Node 节点中通过 &lt;code&gt;kubeadm reset&lt;/code&gt; 命令将 Node 节点下线，此时回到 Master 节点再使用 &lt;code&gt;watch kubectl get pods --all-namespaces&lt;/code&gt; 可以看到下图中报错了，&lt;code&gt;coredns-xxx-xxx&lt;/code&gt; 状态为 &lt;code&gt;CrashLoopBackOff&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>K8s高可用集群</title>
    <link href="http://yoursite.com/2019/06/28/k8s/K8s%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/06/28/k8s/K8s高可用集群/</id>
    <published>2019-06-28T08:00:19.697Z</published>
    <updated>2019-06-28T08:15:19.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在入门课程中我们部署的 Kubernetes 是 <strong>集群模式</strong>，但在实际生产中我们需要部署 <strong>高可用集群</strong> ，本章内容旨在指导大家如何部署 Kubernetes 高可用集群</p><h2 id="统一环境配置"><a href="#统一环境配置" class="headerlink" title="统一环境配置"></a>统一环境配置</h2><h3 id="节点配置"><a href="#节点配置" class="headerlink" title="节点配置"></a>节点配置</h3><table><thead><tr><th>主机名</th><th>IP</th><th>角色</th><th>系统</th><th>CPU/内存</th><th>磁盘</th></tr></thead><tbody><tr><td>kubernetes-master-01</td><td>192.168.141.150</td><td>Master</td><td>Ubuntu Server 18.04</td><td>2核2G</td><td>20G</td></tr><tr><td>kubernetes-master-02</td><td>192.168.141.151</td><td>Master</td><td>Ubuntu Server 18.04</td><td>2核2G</td><td>20G</td></tr><tr><td>kubernetes-master-03</td><td>192.168.141.152</td><td>Master</td><td>Ubuntu Server 18.04</td><td>2核2G</td><td>20G</td></tr><tr><td>kubernetes-node-01</td><td>192.168.141.160</td><td>Node</td><td>Ubuntu Server 18.04</td><td>2核4G</td><td>20G</td></tr><tr><td>kubernetes-node-02</td><td>192.168.141.161</td><td>Node</td><td>Ubuntu Server 18.04</td><td>2核4G</td><td>20G</td></tr><tr><td>kubernetes-node-03</td><td>192.168.141.162</td><td>Node</td><td>Ubuntu Server 18.04</td><td>2核4G</td><td>20G</td></tr><tr><td>Kubernetes VIP</td><td>192.168.141.200</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h3 id="对操作系统的配置"><a href="#对操作系统的配置" class="headerlink" title="对操作系统的配置"></a>对操作系统的配置</h3><a id="more"></a><h4 id="关闭交换空间"><a href="#关闭交换空间" class="headerlink" title="关闭交换空间"></a>关闭交换空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure><h4 id="避免开机启动交换空间"><a href="#避免开机启动交换空间" class="headerlink" title="避免开机启动交换空间"></a>避免开机启动交换空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释 swap 开头的行</span></span><br><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h4 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消 DNS 行注释，并增加 DNS 配置如：114.114.114.114，修改后重启下计算机</span></span><br><span class="line">vi /etc/systemd/resolved.conf</span><br></pre></td></tr></table></figure><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 安装所需依赖</span></span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># 安装 GPG 证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 新增软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># 再次更新软件源</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line"><span class="comment"># 安装 Docker CE 版</span></span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="配置-Docker-加速器"><a href="#配置-Docker-加速器" class="headerlink" title="配置 Docker 加速器"></a>配置 Docker 加速器</h4><p>在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight plain"><figcaption><span>/etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装-kubeadm，kubelet，kubectl"><a href="#安装-kubeadm，kubelet，kubectl" class="headerlink" title="安装 kubeadm，kubelet，kubectl"></a>安装 kubeadm，kubelet，kubectl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装系统工具</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 GPG 证书</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入软件源；注意：我们用系统代号为 bionic，但目前阿里云不支持，所以沿用 16.04 的 xenial</span></span><br><span class="line">cat &lt;&lt; EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">&gt; deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">&gt; EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h4 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h4><p><strong>设置时区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>先选择 <strong>Asia（亚洲）</strong>-&gt;然后选择 <strong>Shanghai（上海）</strong></p><p><strong>时间同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ntpdate</span></span><br><span class="line">apt-get install ntpdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统时间与网络时间同步（cn.pool.ntp.org 位于中国的公共 NTP 服务器）</span></span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将系统时间写入硬件时间</span></span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p><strong>确认时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下（自行对照与系统时间是否一致）</span></span><br><span class="line">Fri Jun 28 16:04:54 CST 2019</span><br></pre></td></tr></table></figure><h4 id="配置-IPVS"><a href="#配置-IPVS" class="headerlink" title="配置 IPVS"></a>配置 IPVS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装系统工具</span></span><br><span class="line">apt-get install -y ipset ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置并加载 IPVS 模块</span></span><br><span class="line">mkdir -p /etc/sysconfig/modules/</span><br><span class="line">vi /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入如下内容</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本，注意：如果重启则需要重新运行该脚本</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本输出如下</span></span><br><span class="line">ip_vs_sh               16384  0</span><br><span class="line">ip_vs_wrr              16384  0</span><br><span class="line">ip_vs_rr               16384  0</span><br><span class="line">ip_vs                 147456  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack_ipv4      16384  3</span><br><span class="line">nf_defrag_ipv4         16384  1 nf_conntrack_ipv4</span><br><span class="line">nf_conntrack          131072  8 xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_ipv4,nf_nat,ipt_MASQUERADE,nf_nat_ipv4,nf_conntrack_netlink,ip_vs</span><br><span class="line">libcrc32c              16384  4 nf_conntrack,nf_nat,raid456,ip_vs</span><br></pre></td></tr></table></figure><h4 id="配置内核参数"><a href="#配置内核参数" class="headerlink" title="配置内核参数"></a>配置内核参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">vi /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入如下内容</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用参数</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用参数输出如下（找到 Applying /etc/sysctl.d/k8s.conf 开头的日志）</span></span><br><span class="line">* Applying /etc/sysctl.d/10-console-messages.conf ...</span><br><span class="line">kernel.printk = 4 4 1 7</span><br><span class="line">* Applying /etc/sysctl.d/10-ipv6-privacy.conf ...</span><br><span class="line">* Applying /etc/sysctl.d/10-kernel-hardening.conf ...</span><br><span class="line">kernel.kptr_restrict = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-link-restrictions.conf ...</span><br><span class="line">fs.protected_hardlinks = 1</span><br><span class="line">fs.protected_symlinks = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-lxd-inotify.conf ...</span><br><span class="line">fs.inotify.max_user_instances = 1024</span><br><span class="line">* Applying /etc/sysctl.d/10-magic-sysrq.conf ...</span><br><span class="line">kernel.sysrq = 176</span><br><span class="line">* Applying /etc/sysctl.d/10-network-security.conf ...</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-ptrace.conf ...</span><br><span class="line">kernel.yama.ptrace_scope = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-zeropage.conf ...</span><br><span class="line">vm.mmap_min_addr = 65536</span><br><span class="line">* Applying /usr/lib/sysctl.d/50-default.conf ...</span><br><span class="line">net.ipv4.conf.all.promote_secondaries = 1</span><br><span class="line">net.core.default_qdisc = fq_codel</span><br><span class="line">* Applying /etc/sysctl.d/99-sysctl.conf ...</span><br><span class="line">* Applying /etc/sysctl.d/k8s.conf ...</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">* Applying /etc/sysctl.conf ...</span><br></pre></td></tr></table></figure><h4 id="修改-cloud-cfg"><a href="#修改-cloud-cfg" class="headerlink" title="修改 cloud.cfg"></a>修改 cloud.cfg</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/cloud/cloud.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置默认为 false，修改为 true 即可</span></span><br><span class="line">preserve_hostname: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="单独节点配置"><a href="#单独节点配置" class="headerlink" title="单独节点配置"></a>单独节点配置</h2><blockquote><p>特别注意：为 Master 和 Node 节点单独配置对应的 <strong>IP</strong> 和 <strong>主机名</strong></p></blockquote><h3 id="配置-IP"><a href="#配置-IP" class="headerlink" title="配置 IP"></a>配置 IP</h3><p>编辑 <code>vi /etc/netplan/50-cloud-init.yaml</code> 配置文件，修改内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        ens33:</span></span><br><span class="line">          <span class="comment"># 我的 Master 是 150 - 152，Node 是 160 - 162</span></span><br><span class="line"><span class="attr">          addresses:</span> <span class="string">[192.168.141.150/24]</span></span><br><span class="line"><span class="attr">          gateway4:</span> <span class="number">192.168</span><span class="number">.141</span><span class="number">.2</span></span><br><span class="line"><span class="attr">          nameservers:</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.141.2]</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname kubernetes-master-01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 hosts</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.141.150 kubernetes-master-01</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装-HAProxy-Keepalived"><a href="#安装-HAProxy-Keepalived" class="headerlink" title="安装 HAProxy + Keepalived"></a>安装 HAProxy + Keepalived</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Kubernetes Master 节点运行组件如下：</p><ul><li><strong>kube-apiserver：</strong> 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制</li><li><strong>kube-scheduler：</strong> 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上</li><li><strong>kube-controller-manager：</strong> 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</li><li><strong>etcd：</strong> CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障（如数据库选主、分布式锁等）</li></ul><p><code>kube-scheduler</code> 和 <code>kube-controller-manager</code> 可以以集群模式运行，通过 leader 选举产生一个工作进程，其它进程处于阻塞模式。</p><p><strong>kube-apiserver 可以运行多个实例，但对其它组件需要提供统一的访问地址，本章节部署 Kubernetes 高可用集群实际就是利用 HAProxy + Keepalived 配置该组件</strong></p><p>配置的思路就是利用 HAProxy + Keepalived 实现 <code>kube-apiserver</code> 虚拟 IP 访问从而实现高可用和负载均衡，拆解如下：</p><ul><li><p>Keepalived 提供 <code>kube-apiserver</code> 对外服务的虚拟 IP（VIP）</p></li><li><p>HAProxy 监听 Keepalived VIP</p></li><li><p>运行 Keepalived 和 HAProxy 的节点称为 LB（负载均衡） 节点</p></li><li><p>Keepalived 是一主多备运行模式，故至少需要两个 LB 节点</p></li><li><p>Keepalived 在运行过程中周期检查本机的 HAProxy 进程状态，如果检测到 HAProxy 进程异常，则触发重新选主的过程，VIP 将飘移到新选出来的主节点，从而实现 VIP 的高可用</p></li><li><p>所有组件（如 kubeclt、apiserver、controller-manager、scheduler 等）都通过 VIP +HAProxy 监听的 6444 端口访问 <code>kube-apiserver</code> 服务（<strong>注意：kube-apiserver 默认端口为 6443，为了避免冲突我们将 HAProxy 端口设置为 6444，其它组件都是通过该端口统一请求 apiserver</strong>）</p><p><img src="http://ww1.sinaimg.cn/large/006j3B4Lly1g4gxp5lqusj312z0lmabz.jpg" alt=""></p></li></ul><h3 id="创建-HAProxy-启动脚本"><a href="#创建-HAProxy-启动脚本" class="headerlink" title="创建 HAProxy 启动脚本"></a>创建 HAProxy 启动脚本</h3><blockquote><p>该步骤在 <code>kubernetes-master-01</code> 执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/lb</span><br><span class="line">vi /usr/<span class="built_in">local</span>/kubernetes/lb/start-haproxy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的 Master 地址</span></span><br><span class="line">MasterIP1=192.168.141.150</span><br><span class="line">MasterIP2=192.168.141.151</span><br><span class="line">MasterIP3=192.168.141.152</span><br><span class="line"><span class="comment"># 这是 kube-apiserver 默认端口，不用修改</span></span><br><span class="line">MasterPort=6443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器将 HAProxy 的 6444 端口暴露出去</span></span><br><span class="line">docker run -d --restart=always --name HAProxy-K8S -p 6444:6444 \</span><br><span class="line">        -e MasterIP1=<span class="variable">$MasterIP1</span> \</span><br><span class="line">        -e MasterIP2=<span class="variable">$MasterIP2</span> \</span><br><span class="line">        -e MasterIP3=<span class="variable">$MasterIP3</span> \</span><br><span class="line">        -e MasterPort=<span class="variable">$MasterPort</span> \</span><br><span class="line">        wise2c/haproxy-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">chmod +x start-haproxy.sh</span><br></pre></td></tr></table></figure><h3 id="创建-Keepalived-启动脚本"><a href="#创建-Keepalived-启动脚本" class="headerlink" title="创建 Keepalived 启动脚本"></a>创建 Keepalived 启动脚本</h3><blockquote><p>该步骤在 <code>kubernetes-master-01</code> 执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/lb</span><br><span class="line">vi /usr/<span class="built_in">local</span>/kubernetes/lb/start-keepalived.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的虚拟 IP 地址</span></span><br><span class="line">VIRTUAL_IP=192.168.141.200</span><br><span class="line"><span class="comment"># 虚拟网卡设备名</span></span><br><span class="line">INTERFACE=ens33</span><br><span class="line"><span class="comment"># 虚拟网卡的子网掩码</span></span><br><span class="line">NETMASK_BIT=24</span><br><span class="line"><span class="comment"># HAProxy 暴露端口，内部指向 kube-apiserver 的 6443 端口</span></span><br><span class="line">CHECK_PORT=6444</span><br><span class="line"><span class="comment"># 路由标识符</span></span><br><span class="line">RID=10</span><br><span class="line"><span class="comment"># 虚拟路由标识符</span></span><br><span class="line">VRID=160</span><br><span class="line"><span class="comment"># IPV4 多播地址，默认 224.0.0.18</span></span><br><span class="line">MCAST_GROUP=224.0.0.18</span><br><span class="line"></span><br><span class="line">docker run -itd --restart=always --name=Keepalived-K8S \</span><br><span class="line">        --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">        -e VIRTUAL_IP=<span class="variable">$VIRTUAL_IP</span> \</span><br><span class="line">        -e INTERFACE=<span class="variable">$INTERFACE</span> \</span><br><span class="line">        -e CHECK_PORT=<span class="variable">$CHECK_PORT</span> \</span><br><span class="line">        -e RID=<span class="variable">$RID</span> \</span><br><span class="line">        -e VRID=<span class="variable">$VRID</span> \</span><br><span class="line">        -e NETMASK_BIT=<span class="variable">$NETMASK_BIT</span> \</span><br><span class="line">        -e MCAST_GROUP=<span class="variable">$MCAST_GROUP</span> \</span><br><span class="line">        wise2c/keepalived-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">chmod +x start-keepalived.sh</span><br></pre></td></tr></table></figure><h3 id="复制脚本到其它-Master-地址"><a href="#复制脚本到其它-Master-地址" class="headerlink" title="复制脚本到其它 Master 地址"></a>复制脚本到其它 Master 地址</h3><p>分别在 <code>kubernetes-master-02</code> 和 <code>kubernetes-master-03</code> 执行创建工作目录命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/lb</span><br></pre></td></tr></table></figure><p>将 <code>kubernetes-master-01</code> 中的脚本拷贝至其它 Master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp start-haproxy.sh start-keepalived.sh 192.168.141.151:/usr/<span class="built_in">local</span>/kubernetes/lb</span><br><span class="line">scp start-haproxy.sh start-keepalived.sh 192.168.141.152:/usr/<span class="built_in">local</span>/kubernetes/lb</span><br></pre></td></tr></table></figure><p>分别在 3 个 Master 中启动容器（执行脚本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /usr/<span class="built_in">local</span>/kubernetes/lb/start-haproxy.sh &amp;&amp; sh /usr/<span class="built_in">local</span>/kubernetes/lb/start-keepalived.sh</span><br></pre></td></tr></table></figure><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">f50df479ecae        wise2c/keepalived-k8s   <span class="string">"/usr/bin/keepalived…"</span>   About an hour ago   Up About an hour                             Keepalived-K8S</span><br><span class="line">75066a7ed2fb        wise2c/haproxy-k8s      <span class="string">"/docker-entrypoint.…"</span>   About an hour ago   Up About an hour    0.0.0.0:6444-&gt;6444/tcp   HAProxy-K8S</span><br></pre></td></tr></table></figure><h4 id="查看网卡绑定的虚拟-IP"><a href="#查看网卡绑定的虚拟-IP" class="headerlink" title="查看网卡绑定的虚拟 IP"></a>查看网卡绑定的虚拟 IP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip a | grep ens33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    inet 192.168.141.151/24 brd 192.168.141.255 scope global ens33</span><br><span class="line">    inet 192.168.141.200/24 scope global secondary ens33</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：Keepalived 会对 HAProxy 监听的 6444 端口进行检测，如果检测失败即认定本机 HAProxy 进程异常，会将 VIP 漂移到其他节点，所以无论本机 Keepalived 容器异常或 HAProxy 容器异常都会导致 VIP 漂移到其他节点</p></blockquote><h2 id="部署-Kubernetes-集群"><a href="#部署-Kubernetes-集群" class="headerlink" title="部署 Kubernetes 集群"></a>部署 Kubernetes 集群</h2><h3 id="初始化-Master"><a href="#初始化-Master" class="headerlink" title="初始化 Master"></a>初始化 Master</h3><ul><li>创建工作目录并导出配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/kubernetes/cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出配置文件到工作目录</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="attr">- groups:</span></span><br><span class="line"><span class="attr">  - system:</span><span class="attr">bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line"><span class="attr">  ttl:</span> <span class="number">24</span><span class="string">h0m0s</span></span><br><span class="line"><span class="attr">  usages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">signing</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="comment"># 修改为主节点 IP</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">192.168</span><span class="number">.141</span><span class="number">.150</span></span><br><span class="line"><span class="attr">  bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line"><span class="attr">  criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-master</span></span><br><span class="line"><span class="attr">  taints:</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line"><span class="attr">  timeoutForControlPlane:</span> <span class="number">4</span><span class="string">m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="comment"># 配置 Keepalived 地址和 HAProxy 端口</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">"192.168.141.200:6444"</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="comment"># 国内不能访问 Google，修改为阿里云</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="comment"># 修改版本号</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.15.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="comment"># 配置成 Calico 的默认网段</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="string">"192.168.0.0/16"</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开启 IPVS 模式</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line"><span class="attr">  SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure><ul><li>kubeadm 初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubeadm 初始化</span></span><br><span class="line">kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kubectl</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><ul><li>安装网络插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Calico</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.7/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装是否成功</span></span><br><span class="line">watch kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><h3 id="加入-Master-节点"><a href="#加入-Master-节点" class="headerlink" title="加入 Master 节点"></a>加入 Master 节点</h3><p>从 <code>kubeadm-init.log</code> 中获取命令，分别将 <code>kubernetes-master-02</code> 和 <code>kubernetes-master-03</code> 加入 Master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下为示例命令</span></span><br><span class="line">kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:56d53268517c132ae81c868ce99c44be797148fb2923e59b49d73c99782ff21f \</span><br><span class="line">  --experimental-control-plane --certificate-key c4d1525b6cce4b69c11c18919328c826f92e660e040a46f5159431d5ff0545bd</span><br></pre></td></tr></table></figure><h3 id="加入-Node-节点"><a href="#加入-Node-节点" class="headerlink" title="加入 Node 节点"></a>加入 Node 节点</h3><p>从 <code>kubeadm-init.log</code> 中获取命令，分别将 <code>kubernetes-node-01</code> 至 <code>kubernetes-node-03</code> 加入 Node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下为示例命令</span></span><br><span class="line">kubeadm join 192.168.141.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:56d53268517c132ae81c868ce99c44be797148fb2923e59b49d73c99782ff21f</span><br></pre></td></tr></table></figure><h3 id="验证集群状态"><a href="#验证集群状态" class="headerlink" title="验证集群状态"></a>验证集群状态</h3><ul><li>查看 Node</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><ul><li>查看 Pod</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get pod -o wide</span><br></pre></td></tr></table></figure><ul><li>查看 Service</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get svc</span><br></pre></td></tr></table></figure><ul><li>验证 IPVS</li></ul><p>查看 kube-proxy 日志，server_others.go:176] Using ipvs Proxier.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system logs -f &lt;kube-proxy 容器名&gt;</span><br></pre></td></tr></table></figure><ul><li>查看代理规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -ln</span><br></pre></td></tr></table></figure><ul><li>查看生效的配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get cm kubeadm-config -oyaml</span><br></pre></td></tr></table></figure><ul><li>查看 etcd 集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system <span class="built_in">exec</span> etcd-kubernetes-master-01 -- etcdctl \</span><br><span class="line">--endpoints=https://192.168.22.150:2379 \</span><br><span class="line">--ca-file=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert-file=/etc/kubernetes/pki/etcd/server.crt \</span><br><span class="line">--key-file=/etc/kubernetes/pki/etcd/server.key cluster-health</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">member 1dfaf07371bb0cb6 is healthy: got healthy result from https://192.168.141.152:2379</span><br><span class="line">member 2da85730b52fbeb2 is healthy: got healthy result from https://192.168.141.150:2379</span><br><span class="line">member 6a3153eb4faaaffa is healthy: got healthy result from https://192.168.141.151:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure><h3 id="验证高可用"><a href="#验证高可用" class="headerlink" title="验证高可用"></a>验证高可用</h3><blockquote><p>特别注意：Keepalived 要求至少 2 个备用节点，故想测试高可用至少需要 1 主 2 从模式验证，否则可能出现意想不到的问题</p></blockquote><p>对任意一台 Master 机器执行关机操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><p>在任意一台 Master 节点上查看 Node 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，除已关机那台状态为 NotReady 其余正常便表示成功</span></span><br><span class="line">NAME                   STATUS   ROLES    AGE   VERSION</span><br><span class="line">kubernetes-master-01   NotReady master   18m   v1.15.0</span><br><span class="line">kubernetes-master-02   Ready    master   17m   v1.15.0</span><br><span class="line">kubernetes-master-03   Ready    master   16m   v1.15.0</span><br></pre></td></tr></table></figure><p>查看 VIP 漂移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip a |grep ens33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    inet 192.168.141.151/24 brd 192.168.141.255 scope global ens33</span><br><span class="line">    inet 192.168.141.200/24 scope global secondary ens33</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在入门课程中我们部署的 Kubernetes 是 &lt;strong&gt;集群模式&lt;/strong&gt;，但在实际生产中我们需要部署 &lt;strong&gt;高可用集群&lt;/strong&gt; ，本章内容旨在指导大家如何部署 Kubernetes 高可用集群&lt;/p&gt;
&lt;h2 id=&quot;统一环境配置&quot;&gt;&lt;a href=&quot;#统一环境配置&quot; class=&quot;headerlink&quot; title=&quot;统一环境配置&quot;&gt;&lt;/a&gt;统一环境配置&lt;/h2&gt;&lt;h3 id=&quot;节点配置&quot;&gt;&lt;a href=&quot;#节点配置&quot; class=&quot;headerlink&quot; title=&quot;节点配置&quot;&gt;&lt;/a&gt;节点配置&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;CPU/内存&lt;/th&gt;
&lt;th&gt;磁盘&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-master-01&lt;/td&gt;
&lt;td&gt;192.168.141.150&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核2G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-master-02&lt;/td&gt;
&lt;td&gt;192.168.141.151&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核2G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-master-03&lt;/td&gt;
&lt;td&gt;192.168.141.152&lt;/td&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核2G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-node-01&lt;/td&gt;
&lt;td&gt;192.168.141.160&lt;/td&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核4G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-node-02&lt;/td&gt;
&lt;td&gt;192.168.141.161&lt;/td&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核4G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubernetes-node-03&lt;/td&gt;
&lt;td&gt;192.168.141.162&lt;/td&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;Ubuntu Server 18.04&lt;/td&gt;
&lt;td&gt;2核4G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes VIP&lt;/td&gt;
&lt;td&gt;192.168.141.200&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;对操作系统的配置&quot;&gt;&lt;a href=&quot;#对操作系统的配置&quot; class=&quot;headerlink&quot; title=&quot;对操作系统的配置&quot;&gt;&lt;/a&gt;对操作系统的配置&lt;/h3&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用K8s创建容器</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E4%BD%BF%E7%94%A8K8s%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/06/28/k8s/使用K8s创建容器/</id>
    <published>2019-06-28T07:55:50.045Z</published>
    <updated>2019-06-28T08:00:46.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查组件运行状态"><a href="#检查组件运行状态" class="headerlink" title="检查组件运行状态"></a>检查组件运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line"><span class="comment"># 调度服务，主要作用是将 POD 调度到 Node</span></span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line"><span class="comment"># 自动化修复服务，主要作用是 Node 宕机后自动修复 Node 回到正常的工作状态</span></span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line"><span class="comment"># 服务注册与发现</span></span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="检查-Master-状态"><a href="#检查-Master-状态" class="headerlink" title="检查 Master 状态"></a>检查 Master 状态</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># 主节点状态</span></span><br><span class="line">Kubernetes master is running at https://192.168.22.100:6443</span><br><span class="line"><span class="comment"># DNS 状态</span></span><br><span class="line">KubeDNS is running at https://192.168.22.100:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><h2 id="检查-Nodes-状态"><a href="#检查-Nodes-状态" class="headerlink" title="检查 Nodes 状态"></a>检查 Nodes 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，STATUS 为 Ready 即为正常状态</span></span><br><span class="line">NAME                STATUS   ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   Ready    master   44h     v1.15.0</span><br><span class="line">kubernetes-slave1   Ready    &lt;none&gt;   3h38m   v1.15.0</span><br><span class="line">kubernetes-slave2   Ready    &lt;none&gt;   3h37m   v1.15.0</span><br></pre></td></tr></table></figure><h2 id="运行第一个容器实例"><a href="#运行第一个容器实例" class="headerlink" title="运行第一个容器实例"></a>运行第一个容器实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 kubectl 命令创建两个监听 80 端口的 Nginx Pod（Kubernetes 运行容器的最小单元）</span></span><br><span class="line">kubectl run nginx --image=nginx --replicas=2 --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx created</span><br></pre></td></tr></table></figure><h2 id="查看全部-Pods-的状态"><a href="#查看全部-Pods-的状态" class="headerlink" title="查看全部 Pods 的状态"></a>查看全部 Pods 的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，需要等待一小段实践，STATUS 为 Running 即为运行成功</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-755464dd6c-qnmwp   1/1     Running   0          90m</span><br><span class="line">nginx-755464dd6c-shqrp   1/1     Running   0          90m</span><br></pre></td></tr></table></figure><h2 id="查看已部署的服务"><a href="#查看已部署的服务" class="headerlink" title="查看已部署的服务"></a>查看已部署的服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   2/2     2            2           91m</span><br></pre></td></tr></table></figure><h2 id="映射服务，让用户可以访问"><a href="#映射服务，让用户可以访问" class="headerlink" title="映射服务，让用户可以访问"></a>映射服务，让用户可以访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=LoadBalancer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">service/nginx exposed</span><br></pre></td></tr></table></figure><h2 id="查看已发布的服务"><a href="#查看已发布的服务" class="headerlink" title="查看已发布的服务"></a>查看已发布的服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME         TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1        &lt;none&gt;        443/TCP        44h</span><br><span class="line"><span class="comment"># 由此可见，Nginx 服务已成功发布并将 80 端口映射为 31738</span></span><br><span class="line">nginx        LoadBalancer   10.108.121.244   &lt;pending&gt;     80:31738/TCP   88m</span><br></pre></td></tr></table></figure><h2 id="查看服务详情"><a href="#查看服务详情" class="headerlink" title="查看服务详情"></a>查看服务详情</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe service nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Name:                     nginx</span><br><span class="line">Namespace:                default</span><br><span class="line">Labels:                   run=nginx</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 run=nginx</span><br><span class="line">Type:                     LoadBalancer</span><br><span class="line">IP:                       10.108.121.244</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  31738/TCP</span><br><span class="line">Endpoints:                192.168.17.5:80,192.168.8.134:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>通过浏览器访问 Master 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.22.100:31738/</span><br></pre></td></tr></table></figure><p>此时 Kubernetes 会以负载均衡的方式访问部署的 Nginx 服务，能够正常看到 Nginx 的欢迎页即表示成功。容器实际部署在其它 Node 节点上，通过访问 Node 节点的 IP:Port 也是可以的。</p><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">deployment.extensions <span class="string">"nginx"</span> deleted</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">service <span class="string">"nginx"</span> deleted</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;检查组件运行状态&quot;&gt;&lt;a href=&quot;#检查组件运行状态&quot; class=&quot;headerlink&quot; title=&quot;检查组件运行状态&quot;&gt;&lt;/a&gt;检查组件运行状态&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get cs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS    MESSAGE             ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 调度服务，主要作用是将 POD 调度到 Node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scheduler            Healthy   ok                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 自动化修复服务，主要作用是 Node 宕机后自动修复 Node 回到正常的工作状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;controller-manager   Healthy   ok                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 服务注册与发现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd-0               Healthy   &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;health&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;检查-Master-状态&quot;&gt;&lt;a href=&quot;#检查-Master-状态&quot; class=&quot;headerlink&quot; title=&quot;检查 Master 状态&quot;&gt;&lt;/a&gt;检查 Master 状态&lt;/h2&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>配置网络</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/06/28/k8s/配置网络/</id>
    <published>2019-06-28T07:50:13.418Z</published>
    <updated>2019-06-28T07:56:22.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>容器网络是容器选择连接到其他容器、主机和外部网络的机制。容器的 runtime 提供了各种网络模式，每种模式都会产生不同的体验。例如，Docker 默认情况下可以为容器配置以下网络：</p><ul><li><strong>none：</strong> 将容器添加到一个容器专门的网络堆栈中，没有对外连接。</li><li><strong>host：</strong> 将容器添加到主机的网络堆栈中，没有隔离。</li><li><strong>default bridge：</strong> 默认网络模式。每个容器可以通过 IP 地址相互连接。</li><li><strong>自定义网桥：</strong> 用户定义的网桥，具有更多的灵活性、隔离性和其他便利功能。</li></ul><a id="more"></a><h2 id="什么是-CNI"><a href="#什么是-CNI" class="headerlink" title="什么是 CNI"></a>什么是 CNI</h2><p>CNI(Container Network Interface) 是一个标准的，通用的接口。在容器平台，Docker，Kubernetes，Mesos 容器网络解决方案 flannel，calico，weave。只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能，而 CNI 正是这样的一个标准接口协议。</p><h2 id="Kubernetes-中的-CNI-插件"><a href="#Kubernetes-中的-CNI-插件" class="headerlink" title="Kubernetes 中的 CNI 插件"></a>Kubernetes 中的 CNI 插件</h2><p>CNI 的初衷是创建一个框架，用于在配置或销毁容器时动态配置适当的网络配置和资源。插件负责为接口配置和管理 IP 地址，并且通常提供与 IP 管理、每个容器的 IP 分配、以及多主机连接相关的功能。容器运行时会调用网络插件，从而在容器启动时分配 IP 地址并配置网络，并在删除容器时再次调用它以清理这些资源。</p><p>运行时或协调器决定了容器应该加入哪个网络以及它需要调用哪个插件。然后，插件会将接口添加到容器网络命名空间中，作为一个 veth 对的一侧。接着，它会在主机上进行更改，包括将 veth 的其他部分连接到网桥。再之后，它会通过调用单独的 IPAM（IP地址管理）插件来分配 IP 地址并设置路由。</p><p>在 Kubernetes 中，kubelet 可以在适当的时间调用它找到的插件，为通过 kubelet 启动的 pod进行自动的网络配置。</p><p>Kubernetes 中可选的 CNI 插件如下：</p><ul><li>Flannel</li><li>Calico</li><li>Canal</li><li>Weave</li></ul><h2 id="什么是-Calico"><a href="#什么是-Calico" class="headerlink" title="什么是 Calico"></a>什么是 Calico</h2><p>Calico 为容器和虚拟机提供了安全的网络连接解决方案，并经过了大规模生产验证（在公有云和跨数千个集群节点中），可与 Kubernetes，OpenShift，Docker，Mesos，DC / OS 和 OpenStack 集成。</p><p>Calico 还提供网络安全规则的动态实施。使用 Calico 的简单策略语言，您可以实现对容器，虚拟机工作负载和裸机主机端点之间通信的细粒度控制。</p><h2 id="安装网络插件-Calico"><a href="#安装网络插件-Calico" class="headerlink" title="安装网络插件 Calico"></a>安装网络插件 Calico</h2><p>参考官方文档安装：<a href="https://docs.projectcalico.org/v3.7/getting-started/kubernetes/" target="_blank" rel="noopener">https://docs.projectcalico.org/v3.7/getting-started/kubernetes/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Master 节点操作即可</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.7/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装时显示如下输出</span></span><br><span class="line">configmap/calico-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">daemonset.extensions/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.extensions/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br></pre></td></tr></table></figure><p>确认安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要等待所有状态为 Running，注意时间可能较久，3 - 5 分钟的样子</span></span><br><span class="line">Every 2.0s: kubectl get pods --all-namespaces                                                                                                    kubernetes-master: Fri May 10 18:16:51 2019</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-8646dd497f-g2lln    1/1     Running   0          50m</span><br><span class="line">kube-system   calico-node-8jrtp                           1/1     Running   0          50m</span><br><span class="line">kube-system   coredns-8686dcc4fd-mhwfn                    1/1     Running   0          51m</span><br><span class="line">kube-system   coredns-8686dcc4fd-xsxwk                    1/1     Running   0          51m</span><br><span class="line">kube-system   etcd-kubernetes-master                      1/1     Running   0          50m</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master   1/1     Running   0          51m</span><br><span class="line">kube-system   kube-proxy-p8mdw                            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master            1/1     Running   0          51m</span><br></pre></td></tr></table></figure><p>至此基本环境已部署完毕。</p><h2 id="解决-ImagePullBackOff"><a href="#解决-ImagePullBackOff" class="headerlink" title="解决 ImagePullBackOff"></a>解决 ImagePullBackOff</h2><p>在使用 <code>watch kubectl get pods --all-namespaces</code> 命令观察 Pods 状态时如果出现 <code>ImagePullBackOff</code> 无法 Running 的情况，请尝试使用如下步骤处理：</p><ul><li>Master 中删除 Nodes：<ul><li>kubectl drain node-name –delete-local-data –force –ignore-daemonsets</li><li>kubectl delete node node-name</li></ul></li><li>Slave 中重置配置：<code>kubeadm reset</code></li><li>Slave 重启计算机：<code>reboot</code></li><li>Slave 重新加入集群：<code>kubeadm join</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;容器网络是容器选择连接到其他容器、主机和外部网络的机制。容器的 runtime 提供了各种网络模式，每种模式都会产生不同的体验。例如，Docker 默认情况下可以为容器配置以下网络：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;none：&lt;/strong&gt; 将容器添加到一个容器专门的网络堆栈中，没有对外连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host：&lt;/strong&gt; 将容器添加到主机的网络堆栈中，没有隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default bridge：&lt;/strong&gt; 默认网络模式。每个容器可以通过 IP 地址相互连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义网桥：&lt;/strong&gt; 用户定义的网桥，具有更多的灵活性、隔离性和其他便利功能。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm配置slave节点</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E4%BD%BF%E7%94%A8kubeadm%E9%85%8D%E7%BD%AEslave%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2019/06/28/k8s/使用kubeadm配置slave节点/</id>
    <published>2019-06-28T07:45:48.072Z</published>
    <updated>2019-06-28T07:48:43.095Z</updated>
    
    <content type="html"><![CDATA[<p>将 slave 节点加入到集群中很简单，只需要在 slave 服务器上安装 kubeadm，kubectl，kubelet 三个工具，然后使用 kubeadm join 命令加入即可。准备工作如下：</p><ul><li>修改主机名(参考<a href="http://note.youdao.com/noteshare?id=ab4470c80efe783b600c412d3ed8a32a&amp;sub=2602A3505ABF4D869EB5D014527FAF16" target="_blank" rel="noopener">Kubernetes安装装备</a>)</li><li>配置软件源(参考<a href="http://note.youdao.com/noteshare?id=b49b69638c81446f4f25f08fe5fb6b17&amp;sub=DAB8A107B28644F088A3E054FE883287" target="_blank" rel="noopener">安装Kubeadm</a>)</li><li>安装三个工具(参考<a href="http://note.youdao.com/noteshare?id=b49b69638c81446f4f25f08fe5fb6b17&amp;sub=DAB8A107B28644F088A3E054FE883287" target="_blank" rel="noopener">安装Kubeadm</a></li></ul><h2 id="将-slave-加入到集群"><a href="#将-slave-加入到集群" class="headerlink" title="将 slave 加入到集群"></a>将 slave 加入到集群</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.22.130:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:d2872ed87a7b4ae1d9a45e8c193943242071c6859fb79aa1a6a85eed0380cadd</span><br><span class="line"># 安装成功将看到如下信息</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with &apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.15&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &apos;kubectl get nodes&apos; on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>说明：</p><p>token 可以通过安装 master 时的日志查看 token 信息 可以通过 kubeadm token list 命令打印出 token 信息 如果 token 过期，可以使用 kubeadm token create 命令创建新的 token discovery-token-ca-cert-hash 可以通过安装 master 时的日志查看 sha256 信息 可以通过 openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed ‘s/^.* //‘ 命令查看 sha256 信息 以上方式感谢群友 停 驻 提供。</p><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>回到 master 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"># 可以看到 slave 成功加入 master</span><br><span class="line">NAME                STATUS     ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   NotReady   master   3m37s   v1.15.0</span><br><span class="line">kubernetes-slave1   NotReady   &lt;none&gt;   77s     v1.15.0</span><br></pre></td></tr></table></figure><blockquote><p>如果 slave 节点加入 master 时配置有问题可以在 slave 节点上使用 kubeadm reset 重置配置再使用 kubeadm join 命令重新加入即可。希望在 master 节点删除 node ，可以使用 kubeadm delete nodes <name> 删除。</name></p></blockquote><h2 id="查看-pod-状态"><a href="#查看-pod-状态" class="headerlink" title="查看 pod 状态"></a>查看 pod 状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE     IP               NODE                NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-bccdc95cf-cf54h                     0/1     Pending   0          4m7s    &lt;none&gt;           &lt;none&gt;              &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-bccdc95cf-lvkgc                     0/1     Pending   0          4m7s    &lt;none&gt;           &lt;none&gt;              &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-kubernetes-master                      1/1     Running   0          3m30s   192.168.22.100   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-kubernetes-master            1/1     Running   0          3m33s   192.168.22.100   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-kubernetes-master   1/1     Running   0          3m22s   192.168.22.100   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-t428c                            1/1     Running   0          2m8s    192.168.22.101   kubernetes-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-w8r67                            1/1     Running   0          4m7s    192.168.22.100   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-kubernetes-master            1/1     Running   0          3m18s   192.168.22.100   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>由此可以看出 coredns 尚未运行，此时我们还需要安装网络插件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将 slave 节点加入到集群中很简单，只需要在 slave 服务器上安装 kubeadm，kubectl，kubelet 三个工具，然后使用 kubeadm join 命令加入即可。准备工作如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改主机名(参考&lt;a href=&quot;http://note.youdao.com/noteshare?id=ab4470c80efe783b600c412d3ed8a32a&amp;amp;sub=2602A3505ABF4D869EB5D014527FAF16&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kubernetes安装装备&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;配置软件源(参考&lt;a href=&quot;http://note.youdao.com/noteshare?id=b49b69638c81446f4f25f08fe5fb6b17&amp;amp;sub=DAB8A107B28644F088A3E054FE883287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装Kubeadm&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;安装三个工具(参考&lt;a href=&quot;http://note.youdao.com/noteshare?id=b49b69638c81446f4f25f08fe5fb6b17&amp;amp;sub=DAB8A107B28644F088A3E054FE883287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装Kubeadm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;将-slave-加入到集群&quot;&gt;&lt;a href=&quot;#将-slave-加入到集群&quot; class=&quot;headerlink&quot; title=&quot;将 slave 加入到集群&quot;&gt;&lt;/a&gt;将 slave 加入到集群&lt;/h2&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm搭建k8s集群</title>
    <link href="http://yoursite.com/2019/06/28/k8s/%E4%BD%BF%E7%94%A8%20kubeadm%20%E6%90%AD%E5%BB%BA%20k8s%20%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/06/28/k8s/使用 kubeadm 搭建 k8s 集群/</id>
    <published>2019-06-28T07:38:07.723Z</published>
    <updated>2019-06-28T07:47:22.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-kubernetes-主节点"><a href="#安装-kubernetes-主节点" class="headerlink" title="安装 kubernetes 主节点"></a>安装 kubernetes 主节点</h2><p>执行以下命令初始化主节点，该命令指定了初始化时需要使用的配置文件，其中添加 <code>--experimental-upload-certs</code> 参数可以在后续执行加入节点时自动分发证书文件。追加的 <code>tee kubeadm-init.log</code> 用以输出日志。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功则会有如下输出</span></span><br><span class="line">Flag --experimental-upload-certs has been deprecated, use --upload-certs instead</span><br><span class="line">[init] Using Kubernetes version: v1.15.0</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"front-proxy-ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master localhost] and IPs [192.168.22.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master localhost] and IPs [192.168.22.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.22.130]</span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"sa"</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"kubelet.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[<span class="built_in">wait</span>-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">"/etc/kubernetes/manifests"</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 25.004958 seconds</span><br><span class="line">[upload-config] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">"kubelet-config-1.15"</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> Secret <span class="string">"kubeadm-certs"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">f92c815417afcc03ab258791d3e75bf23d92b41dc1f5a6893a25cd217804dd43</span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master as control-plane by adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: abcdef.0123456789abcdef</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] Creating the <span class="string">"cluster-info"</span> ConfigMap <span class="keyword">in</span> the <span class="string">"kube-public"</span> namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.22.130:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:d2872ed87a7b4ae1d9a45e8c193943242071c6859fb79aa1a6a85eed0380cadd</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果安装 kubernetes 版本和下载的镜像版本不统一则会出现 <code>timed out waiting for the condition</code> 错误。中途失败或是想修改配置可以使用 <code>kubeadm reset</code> 命令重置配置，再做初始化操作即可。</p></blockquote><h2 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非 ROOT 用户执行</span></span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 能够打印出节点信息即表示成功</span></span><br><span class="line">NAME                STATUS     ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   NotReady   master   2m10s   v1.15.0</span><br></pre></td></tr></table></figure><p>至此主节点配置完成</p><h2 id="kubeadm-init-的执行过程"><a href="#kubeadm-init-的执行过程" class="headerlink" title="kubeadm init 的执行过程"></a>kubeadm init 的执行过程</h2><ul><li>init：指定版本进行初始化操作</li><li>preflight：初始化前的检查和下载所需要的 Docker 镜像文件</li><li>kubelet-start：生成 kubelet 的配置文件 <code>var/lib/kubelet/config.yaml</code>，没有这个文件 kubelet 无法启动，所以初始化之前的 kubelet 实际上启动不会成功</li><li>certificates：生成 Kubernetes 使用的证书，存放在 <code>/etc/kubernetes/pki</code> 目录中</li><li>kubeconfig：生成 KubeConfig 文件，存放在 <code>/etc/kubernetes</code> 目录中，组件之间通信需要使用对应文件</li><li>control-plane：使用 <code>/etc/kubernetes/manifest</code> 目录下的 YAML 文件，安装 Master 组件</li><li>etcd：使用 <code>/etc/kubernetes/manifest/etcd.yaml</code> 安装 Etcd 服务</li><li>wait-control-plane：等待 control-plan 部署的 Master 组件启动</li><li>apiclient：检查 Master 组件服务状态。</li><li>uploadconfig：更新配置</li><li>kubelet：使用 configMap 配置 kubelet</li><li>patchnode：更新 CNI 信息到 Node 上，通过注释的方式记录</li><li>mark-control-plane：为当前节点打标签，打了角色 Master，和不可调度标签，这样默认就不会使用 Master 节点来运行 Pod</li><li>bootstrap-token：生成 token 记录下来，后边使用 <code>kubeadm join</code> 往集群中添加节点时会用到</li><li>addons：安装附加组件 CoreDNS 和 kube-proxy</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-kubernetes-主节点&quot;&gt;&lt;a href=&quot;#安装-kubernetes-主节点&quot; class=&quot;headerlink&quot; title=&quot;安装 kubernetes 主节点&quot;&gt;&lt;/a&gt;安装 kubernetes 主节点&lt;/h2&gt;&lt;p&gt;执行以下命令初始化主节点，该命令指定了初始化时需要使用的配置文件，其中添加 &lt;code&gt;--experimental-upload-certs&lt;/code&gt; 参数可以在后续执行加入节点时自动分发证书文件。追加的 &lt;code&gt;tee kubeadm-init.log&lt;/code&gt; 用以输出日志。&lt;/p&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm配置</title>
    <link href="http://yoursite.com/2019/06/28/k8s/Kubeadm%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/06/28/k8s/Kubeadm配置/</id>
    <published>2019-06-28T07:36:29.306Z</published>
    <updated>2019-06-28T07:47:08.732Z</updated>
    
    <content type="html"><![CDATA[<p>安装 kubernetes 主要是安装它的各个镜像，而 kubeadm 已经为我们集成好了运行 kubernetes 所需的基本镜像。但由于国内的网络原因，在搭建环境时，无法拉取到这些镜像。此时我们只需要修改为阿里云提供的镜像服务即可解决该问题。</p><h2 id="创建并修改配置"><a href="#创建并修改配置" class="headerlink" title="创建并修改配置"></a>创建并修改配置</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出配置文件</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br><span class="line"><span class="comment"># 修改配置为如下内容</span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  <span class="comment"># 修改为主节点 IP</span></span><br><span class="line">  advertiseAddress: 192.168.141.130</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: kubernetes-master</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: <span class="string">""</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line"><span class="comment"># 国内不能访问 Google，修改为阿里云</span></span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line"><span class="comment"># 修改版本号</span></span><br><span class="line">kubernetesVersion: v1.14.1</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  <span class="comment"># 配置成 Calico 的默认网段</span></span><br><span class="line">  podSubnet: <span class="string">"192.168.0.0/16"</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 开启 IPVS 模式</span></span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">featureGates:</span><br><span class="line">  SupportIPVSProxyMode: <span class="literal">true</span></span><br><span class="line">mode: ipvs</span><br></pre></td></tr></table></figure><h2 id="查看和拉取镜像"><a href="#查看和拉取镜像" class="headerlink" title="查看和拉取镜像"></a>查看和拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list --config kubeadm.yml</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm.yml</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy                v1.15.0             d235b23c3570        5 days ago          82.4MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver            v1.15.0             201c7a840312        5 days ago          207MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager   v1.15.0             8328bb49b652        5 days ago          159MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler            v1.15.0             2d3813851e87        5 days ago          81.1MB</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns                   1.3.1               eb516548c180        5 months ago        40.3MB</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd                      3.3.10              2c4adeb21b4f        6 months ago        258MB</span><br><span class="line">registry.aliyuncs.com/google_containers/pause                     3.1                 da86e6ba6ca1        18 months ago       742kB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 kubernetes 主要是安装它的各个镜像，而 kubeadm 已经为我们集成好了运行 kubernetes 所需的基本镜像。但由于国内的网络原因，在搭建环境时，无法拉取到这些镜像。此时我们只需要修改为阿里云提供的镜像服务即可解决该问题。&lt;/p&gt;
&lt;h2 id=&quot;创建并修改配置&quot;&gt;&lt;a href=&quot;#创建并修改配置&quot; class=&quot;headerlink&quot; title=&quot;创建并修改配置&quot;&gt;&lt;/a&gt;创建并修改配置&lt;/h2&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
